F N "main" 0 3 ""
D G "__PCM__" 0 19 ""5.109""
D G "__DEVICE__" 0 19 "877"
D G "__DATE__" 0 19 ""26-May-23""
D G "__TIME__" 0 19 ""14:16:43""
D G "_UNICODE" 0 19 ""?""
D G "__EVAL" 0 19 ""?"" "Standard Header file for the PIC16F877A device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
F N "set_tris_a" 2 37 ""
V L "value" 2 37 "int8" `55 
F B "set_tris_a" 2 37 "void(int8 value)" `54 
F N "set_tris_b" 2 38 ""
V L "value" 2 38 "int8" `57 
F B "set_tris_b" 2 38 "void(int8 value)" `56 
F N "set_tris_c" 2 39 ""
V L "value" 2 39 "int8" `59 
F B "set_tris_c" 2 39 "void(int8 value)" `58 
F N "set_tris_d" 2 40 ""
V L "value" 2 40 "int8" `61 
F B "set_tris_d" 2 40 "void(int8 value)" `60 
F N "set_tris_e" 2 41 ""
V L "value" 2 41 "int8" `63 
F B "set_tris_e" 2 41 "void(int8 value)" `62 
F N "get_tris_a" 2 42 ""
F B "get_tris_a" 2 42 "int8()" `64 
F N "get_tris_b" 2 43 ""
F B "get_tris_b" 2 43 "int8()" `65 
F N "get_tris_c" 2 44 ""
F B "get_tris_c" 2 44 "int8()" `66 
F N "get_tris_d" 2 45 ""
F B "get_tris_d" 2 45 "int8()" `67 
F N "get_tris_e" 2 46 ""
F B "get_tris_e" 2 46 "int8()" `68 
F N "output_a" 2 47 ""
V L "value" 2 47 "int8" `70 
F B "output_a" 2 47 "void(int8 value)" `69 
F N "output_b" 2 48 ""
V L "value" 2 48 "int8" `72 
F B "output_b" 2 48 "void(int8 value)" `71 
F N "output_c" 2 49 ""
V L "value" 2 49 "int8" `74 
F B "output_c" 2 49 "void(int8 value)" `73 
F N "output_d" 2 50 ""
V L "value" 2 50 "int8" `76 
F B "output_d" 2 50 "void(int8 value)" `75 
F N "output_e" 2 51 ""
V L "value" 2 51 "int8" `78 
F B "output_e" 2 51 "void(int8 value)" `77 
F N "input_a" 2 52 ""
F B "input_a" 2 52 "int8()" `79 
F N "input_b" 2 53 ""
F B "input_b" 2 53 "int8()" `80 
F N "input_c" 2 54 ""
F B "input_c" 2 54 "int8()" `81 
F N "input_d" 2 55 ""
F B "input_d" 2 55 "int8()" `82 
F N "input_e" 2 56 ""
F B "input_e" 2 56 "int8()" `83 
F N "input_change_a" 2 57 ""
F B "input_change_a" 2 57 "int8()" `84 
F N "input_change_b" 2 58 ""
F B "input_change_b" 2 58 "int8()" `85 
F N "input_change_c" 2 59 ""
F B "input_change_c" 2 59 "int8()" `86 
F N "input_change_d" 2 60 ""
F B "input_change_d" 2 60 "int8()" `87 
F N "input_change_e" 2 61 ""
F B "input_change_e" 2 61 "int8()" `88 
F N "input" 2 62 ""
V L "pin" 2 62 "int16" `90 
F B "input" 2 62 "int8(int16 pin)" `89 
F N "input_state" 2 63 ""
V L "pin" 2 63 "int16" `92 
F B "input_state" 2 63 "int8(int16 pin)" `91 
F N "output_low" 2 64 ""
V L "pin" 2 64 "int16" `94 
F B "output_low" 2 64 "void(int16 pin)" `93 
F N "output_high" 2 65 ""
V L "pin" 2 65 "int16" `96 
F B "output_high" 2 65 "void(int16 pin)" `95 
F N "output_toggle" 2 66 ""
V L "pin" 2 66 "int16" `98 
F B "output_toggle" 2 66 "void(int16 pin)" `97 
F N "output_bit" 2 67 ""
V L "pin" 2 67 "int16" `100 
V L "level" 2 67 "int8" `101 
F B "output_bit" 2 67 "void(int16 pin,int8 level)" `99 
F N "output_float" 2 68 ""
V L "pin" 2 68 "int16" `103 
F B "output_float" 2 68 "void(int16 pin)" `102 
F N "output_drive" 2 69 ""
V L "pin" 2 69 "int16" `105 
F B "output_drive" 2 69 "void(int16 pin)" `104  "Constants used to identify pins in the above are:"
D G "PIN_A0" 2 73 "40"
D G "PIN_A1" 2 74 "41"
D G "PIN_A2" 2 75 "42"
D G "PIN_A3" 2 76 "43"
D G "PIN_A4" 2 77 "44"
D G "PIN_A5" 2 78 "45"
D G "PIN_B0" 2 80 "48"
D G "PIN_B1" 2 81 "49"
D G "PIN_B2" 2 82 "50"
D G "PIN_B3" 2 83 "51"
D G "PIN_B4" 2 84 "52"
D G "PIN_B5" 2 85 "53"
D G "PIN_B6" 2 86 "54"
D G "PIN_B7" 2 87 "55"
D G "PIN_C0" 2 89 "56"
D G "PIN_C1" 2 90 "57"
D G "PIN_C2" 2 91 "58"
D G "PIN_C3" 2 92 "59"
D G "PIN_C4" 2 93 "60"
D G "PIN_C5" 2 94 "61"
D G "PIN_C6" 2 95 "62"
D G "PIN_C7" 2 96 "63"
D G "PIN_D0" 2 98 "64"
D G "PIN_D1" 2 99 "65"
D G "PIN_D2" 2 100 "66"
D G "PIN_D3" 2 101 "67"
D G "PIN_D4" 2 102 "68"
D G "PIN_D5" 2 103 "69"
D G "PIN_D6" 2 104 "70"
D G "PIN_D7" 2 105 "71"
D G "PIN_E0" 2 107 "72"
D G "PIN_E1" 2 108 "73"
D G "PIN_E2" 2 109 "74"
D G "FALSE" 2 112 "0"
D G "TRUE" 2 113 "1"
D G "BYTE" 2 115 "int8"
D G "BOOLEAN" 2 116 "int1"
D G "getc" 2 118 "getch"
D G "fgetc" 2 119 "getch"
D G "getchar" 2 120 "getch"
D G "putc" 2 121 "putchar"
D G "fputc" 2 122 "putchar"
D G "fgets" 2 123 "gets"
D G "fputs" 2 124 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
F N "restart_cause" 2 129 ""
F B "restart_cause" 2 129 "int8()" `106 
F N "reset_cpu" 2 130 ""
F B "reset_cpu" 2 130 "void()" `107 
F N "sleep" 2 131 ""
F B "sleep" 2 131 "void()" `108  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_FROM_SLEEP" 2 133 "3"
D G "WDT_TIMEOUT" 2 134 "11"
D G "MCLR_FROM_SLEEP" 2 135 "19"
D G "MCLR_FROM_RUN" 2 136 "27"
D G "NORMAL_POWER_UP" 2 137 "25"
D G "BROWNOUT_RESTART" 2 138 "26"
c L "sleep" 2 3 5 "FUNCTION"
F N "setup_timer_0" 2 145 ""
V L "mode" 2 145 "int8" `110 
F B "setup_timer_0" 2 145 "void(int8 mode)" `109 
F N "set_timer0" 2 146 ""
V L "value" 2 146 "int8" `112 
F B "set_timer0" 2 146 "void(int8 value)" `111 
F N "get_timer0" 2 147 ""
F B "get_timer0" 2 147 "int8()" `113 
F N "setup_counters" 2 148 ""
V L "mode" 2 148 "int8" `115 
V L "prescaler" 2 148 "int8" `116 
F B "setup_counters" 2 148 "void(int8 mode,int8 prescaler)" `114 
F N "set_rtcc" 2 149 ""
V L "value" 2 149 "int8" `118 
F B "set_rtcc" 2 149 "void(int8 value)" `117 
F N "get_rtcc" 2 150 ""
F B "get_rtcc" 2 150 "int8()" `119  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 2 152 "0"
D G "T0_EXT_L_TO_H" 2 153 "32"
D G "T0_EXT_H_TO_L" 2 154 "48"
D G "T0_DIV_1" 2 156 "8"
D G "T0_DIV_2" 2 157 "0"
D G "T0_DIV_4" 2 158 "1"
D G "T0_DIV_8" 2 159 "2"
D G "T0_DIV_16" 2 160 "3"
D G "T0_DIV_32" 2 161 "4"
D G "T0_DIV_64" 2 162 "5"
D G "T0_DIV_128" 2 163 "6"
D G "T0_DIV_256" 2 164 "7"
D G "T0_8_BIT" 2 167 "0"
D G "RTCC_INTERNAL" 2 169 "0" "The following are provided for compatibility"
D G "RTCC_EXT_L_TO_H" 2 170 "32" "with older compiler versions"
D G "RTCC_EXT_H_TO_L" 2 171 "48"
D G "RTCC_DIV_1" 2 172 "8"
D G "RTCC_DIV_2" 2 173 "0"
D G "RTCC_DIV_4" 2 174 "1"
D G "RTCC_DIV_8" 2 175 "2"
D G "RTCC_DIV_16" 2 176 "3"
D G "RTCC_DIV_32" 2 177 "4"
D G "RTCC_DIV_64" 2 178 "5"
D G "RTCC_DIV_128" 2 179 "6"
D G "RTCC_DIV_256" 2 180 "7"
D G "RTCC_8_BIT" 2 181 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
F N "setup_wdt" 2 192 ""
V L "mode" 2 192 "int16" `121 
F B "setup_wdt" 2 192 "void(int16 mode)" `120 
F N "restart_wdt" 2 193 ""
F B "restart_wdt" 2 193 "void()" `122  "Constants used for SETUP_WDT() are:"
D G "WDT_18MS" 2 196 "8"
D G "WDT_36MS" 2 197 "9"
D G "WDT_72MS" 2 198 "10"
D G "WDT_144MS" 2 199 "11"
D G "WDT_288MS" 2 200 "12"
D G "WDT_576MS" 2 201 "13"
D G "WDT_1152MS" 2 202 "14"
D G "WDT_2304MS" 2 203 "15"
c L "restart_wdt" 2 3 3 "FUNCTION"
F N "setup_timer_1" 2 209 ""
V L "mode" 2 209 "int16" `124 
F B "setup_timer_1" 2 209 "void(int16 mode)" `123 
F N "get_timer1" 2 210 ""
F B "get_timer1" 2 210 "int16()" `125 
F N "set_timer1" 2 211 ""
V L "value" 2 211 "int16" `127 
F B "set_timer1" 2 211 "void(int16 value)" `126  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 2 214 "0"
D G "T1_INTERNAL" 2 215 "0x85"
D G "T1_EXTERNAL" 2 216 "0x87"
D G "T1_EXTERNAL_SYNC" 2 217 "0x83"
D G "T1_CLK_OUT" 2 219 "8"
D G "T1_DIV_BY_1" 2 221 "0"
D G "T1_DIV_BY_2" 2 222 "0x10"
D G "T1_DIV_BY_4" 2 223 "0x20"
D G "T1_DIV_BY_8" 2 224 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
F N "setup_timer_2" 2 229 ""
V L "mode" 2 229 "int8" `129 
V L "period" 2 229 "int8" `130 
V L "postscale" 2 229 "int8" `131 
F B "setup_timer_2" 2 229 "void(int8 mode,int8 period,int8 postscale)" `128 
F N "get_timer2" 2 230 ""
F B "get_timer2" 2 230 "int8()" `132 
F N "set_timer2" 2 231 ""
V L "value" 2 231 "int8" `134 
F B "set_timer2" 2 231 "void(int8 value)" `133  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 2 233 "0"
D G "T2_DIV_BY_1" 2 234 "4"
D G "T2_DIV_BY_4" 2 235 "5"
D G "T2_DIV_BY_16" 2 236 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
F N "setup_ccp1" 2 242 ""
V L "mode" 2 242 "int32" `136 
F B "setup_ccp1" 2 242 "void(int32 mode)" `135 
F N "setup_ccp1" 2 243 ""
V L "mode" 2 243 "int32" `138 
V L "pwm" 2 243 "int8" `139 
F B "setup_ccp1" 2 243 "void(int32 mode,int8 pwm)" `137 
F N "set_pwm1_duty" 2 244 ""
V L "value" 2 244 "int16" `141 
F B "set_pwm1_duty" 2 244 "void(int16 value)" `140  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 2 246 "0"
D G "CCP_CAPTURE_FE" 2 247 "4"
D G "CCP_CAPTURE_RE" 2 248 "5"
D G "CCP_CAPTURE_DIV_4" 2 249 "6"
D G "CCP_CAPTURE_DIV_16" 2 250 "7"
D G "CCP_COMPARE_SET_ON_MATCH" 2 251 "8"
D G "CCP_COMPARE_CLR_ON_MATCH" 2 252 "9"
D G "CCP_COMPARE_INT" 2 253 "0xA"
D G "CCP_COMPARE_RESET_TIMER" 2 254 "0xB"
D G "CCP_PWM" 2 255 "0xC"
D G "CCP_PWM_PLUS_1" 2 256 "0x1c"
D G "CCP_PWM_PLUS_2" 2 257 "0x2c"
D G "CCP_PWM_PLUS_3" 2 258 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
F N "setup_ccp2" 2 264 ""
V L "mode" 2 264 "int32" `146 
F B "setup_ccp2" 2 264 "void(int32 mode)" `145 
F N "setup_ccp2" 2 265 ""
V L "mode" 2 265 "int32" `148 
V L "pwm" 2 265 "int8" `149 
F B "setup_ccp2" 2 265 "void(int32 mode,int8 pwm)" `147 
F N "set_pwm2_duty" 2 266 ""
V L "value" 2 266 "int16" `151 
F B "set_pwm2_duty" 2 266 "void(int16 value)" `150 
c L "set_pwm2_duty" 2 3 5 "FUNCTION"
F N "setup_psp" 2 275 ""
V L "mode" 2 275 "int8" `156 
F B "setup_psp" 2 275 "void(int8 mode)" `155 
F N "psp_output_full" 2 276 ""
F B "psp_output_full" 2 276 "int8()" `157 
F N "psp_input_full" 2 277 ""
F B "psp_input_full" 2 277 "int8()" `158 
F N "psp_overflow" 2 278 ""
F B "psp_overflow" 2 278 "int8()" `159  "Constants used in SETUP_PSP() are:"
D G "PSP_ENABLED" 2 280 "0x10"
D G "PSP_DISABLED" 2 281 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
F N "setup_spi" 2 288 ""
V L "mode" 2 288 "int32" `162 
F B "setup_spi" 2 288 "void(int32 mode)" `161 
F N "spi_write" 2 289 ""
V L "value" 2 289 "int8" `164 
F B "spi_write" 2 289 "void(int8 value)" `163 
F N "spi_read" 2 290 ""
F B "spi_read" 2 290 "int8()" `165 
F N "spi_read" 2 291 ""
V L "value" 2 291 "int8" `167 
F B "spi_read" 2 291 "int8(int8 value)" `166 
F N "spi_data_in" 2 292 ""
F B "spi_data_in" 2 292 "int8()" `168  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 2 294 "0x00"
D G "SPI_MASTER" 2 295 "0x20"
D G "SPI_SLAVE" 2 296 "0x24"
D G "SPI_SCK_IDLE_HIGH" 2 297 "0x10"
D G "SPI_SCK_IDLE_LOW" 2 298 "0x00"
D G "SPI_CLK_DIV_4" 2 299 "0x00"
D G "SPI_CLK_DIV_16" 2 300 "0x01"
D G "SPI_CLK_DIV_64" 2 301 "0x02"
D G "SPI_CLK_T2" 2 302 "0x03"
D G "SPI_SS_DISABLED" 2 303 "0x01"
D G "SPI_XMIT_L_TO_H" 2 305 "0x4000"
D G "SPI_XMIT_H_TO_L" 2 306 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 2 308 "0x0000"
D G "SPI_SAMPLE_AT_END" 2 309 "0x8000"
D G "SPI_L_TO_H" 2 312 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 2 313 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
F N "setup_uart" 2 317 ""
V L "baud" 2 317 "int32" `170 
F B "setup_uart" 2 317 "void(int32 baud)" `169 
F N "setup_uart" 2 318 ""
V L "baud" 2 318 "int32" `172 
V L "stream" 2 318 "int8" `173 
F B "setup_uart" 2 318 "void(int32 baud,int8 stream)" `171 
F N "setup_uart" 2 319 ""
V L "baud" 2 319 "int32" `175 
V L "stream" 2 319 "int8" `176 
V L "clock" 2 319 "int32" `177 
F B "setup_uart" 2 319 "void(int32 baud,int8 stream,int32 clock)" `174 
F N "set_uart_speed" 2 320 ""
V L "baud" 2 320 "int32" `179 
F B "set_uart_speed" 2 320 "void(int32 baud)" `178 
F N "set_uart_speed" 2 321 ""
V L "baud" 2 321 "int32" `181 
V L "stream" 2 321 "int8" `182 
F B "set_uart_speed" 2 321 "void(int32 baud,int8 stream)" `180 
F N "set_uart_speed" 2 322 ""
V L "baud" 2 322 "int32" `184 
V L "stream" 2 322 "int8" `185 
V L "clock" 2 322 "int32" `186 
F B "set_uart_speed" 2 322 "void(int32 baud,int8 stream,int32 clock)" `183  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 2 326 "2"
D G "UART_DATA" 2 327 "4"
c L "set_uart_speed" 2 3 3 "FUNCTION"
F N "setup_comparator" 2 331 ""
V L "mode" 2 331 "int32" `188 
F B "setup_comparator" 2 331 "void(int32 mode)" `187  "Constants used in setup_comparator() are:"
D G "A0_A3_A1_A3" 2 333 "0xfff04"
D G "A0_A3_A1_A2_OUT_ON_A4_A5" 2 334 "0xfcf03"
D G "A0_A3_A1_A3_OUT_ON_A4_A5" 2 335 "0xbcf05"
D G "NC_NC_NC_NC" 2 336 "0x0ff07"
D G "A0_A3_A1_A2" 2 337 "0xfff02"
D G "A0_A3_NC_NC_OUT_ON_A4" 2 338 "0x9ef01"
D G "A0_VR_A1_VR" 2 339 "0x3ff06"
D G "A3_VR_A2_VR" 2 340 "0xcff0e"
D G "CP1_INVERT" 2 341 "0x0000010"
D G "CP2_INVERT" 2 342 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
F N "setup_vref" 2 349 ""
V L "mode" 2 349 "int8" `192 
F B "setup_vref" 2 349 "void(int8 mode)" `191  "Constants used in setup_vref() are:"
D G "VREF_LOW" 2 351 "0xa0"
D G "VREF_HIGH" 2 352 "0x80"
D G "VREF_A2" 2 354 "0x40"
c L "setup_vref" 2 3 4 "FUNCTION"
F N "setup_adc" 2 362 ""
V L "mode" 2 362 "int32" `194 
F B "setup_adc" 2 362 "void(int32 mode)" `193 
F N "read_adc" 2 363 ""
F B "read_adc" 2 363 "int8()" `195 
F N "read_adc" 2 364 ""
V L "mode" 2 364 "int8" `197 
F B "read_adc" 2 364 "int8(int8 mode)" `196 
F N "read_adc" 2 365 ""
f G "read_adc" 2 365 "int16()" `198 
F N "read_adc" 2 366 ""
V L "mode" 2 366 "int8" `199 
f G "read_adc" 2 366 "int16(int8 mode,int8 setting)" `198 
F N "adc_done" 2 367 ""
F B "adc_done" 2 367 "int8(int8 mode,int8 setting)" `198  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 2 369 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 2 370 "0x10000"
D G "ADC_CLOCK_DIV_4" 2 371 "0x4000"
D G "ADC_CLOCK_DIV_8" 2 372 "0x0040"
D G "ADC_CLOCK_DIV_16" 2 373 "0x4040"
D G "ADC_CLOCK_DIV_32" 2 374 "0x0080"
D G "ADC_CLOCK_DIV_64" 2 375 "0x4080"
D G "ADC_CLOCK_INTERNAL" 2 376 "0x00c0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
F N "setup_adc_ports" 2 379 ""
V L "setting" 2 379 "int8" `200 
F B "setup_adc_ports" 2 379 "void(int8 setting)" `199 
F N "set_adc_channel" 2 380 ""
V L "channel" 2 380 "int8" `202 
F B "set_adc_channel" 2 380 "void(int8 channel)" `201  "Constants used in SETUP_ADC_PORTS() are:"
D G "NO_ANALOGS" 2 382 "7" "None"
D G "ALL_ANALOG" 2 383 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
D G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 2 384 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
D G "AN0_AN1_AN2_AN3_AN4" 2 385 "2" "A0 A1 A2 A3 A5"
D G "AN0_AN1_AN2_AN4_VSS_VREF" 2 386 "3" "A0 A1 A2 A4 VRefh=A3"
D G "AN0_AN1_AN3" 2 387 "4" "A0 A1 A3"
D G "AN0_AN1_VSS_VREF" 2 388 "5" "A0 A1 VRefh=A3"
D G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 2 389 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
D G "AN0_AN1_AN2_AN3_AN4_AN5" 2 390 "0x09" "A0 A1 A2 A3 A5 E0"
D G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 2 391 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
D G "AN0_AN1_AN4_AN5_VREF_VREF" 2 392 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
D G "AN0_AN1_AN4_VREF_VREF" 2 393 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
D G "AN0_AN1_VREF_VREF" 2 394 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
D G "AN0" 2 395 "0x0E" "A0"
D G "AN0_VREF_VREF" 2 396 "0x0F" "A0 VRefh=A3 VRefl=A2"
D G "ANALOG_RA3_REF" 2 397 "0x1" "!old only provided for compatibility"
D G "A_ANALOG" 2 398 "0x2" "!old only provided for compatibility"
D G "A_ANALOG_RA3_REF" 2 399 "0x3" "!old only provided for compatibility"
D G "RA0_RA1_RA3_ANALOG" 2 400 "0x4" "!old only provided for compatibility"
D G "RA0_RA1_ANALOG_RA3_REF" 2 401 "0x5" "!old only provided for compatibility"
D G "ANALOG_RA3_RA2_REF" 2 402 "0x8" "!old only provided for compatibility"
D G "ANALOG_NOT_RE1_RE2" 2 403 "0x9" "!old only provided for compatibility"
D G "ANALOG_NOT_RE1_RE2_REF_RA3" 2 404 "0xA" "!old only provided for compatibility"
D G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 2 405 "0xB" "!old only provided for compatibility"
D G "A_ANALOG_RA3_RA2_REF" 2 406 "0xC" "!old only provided for compatibility"
D G "RA0_RA1_ANALOG_RA3_RA2_REF" 2 407 "0xD" "!old only provided for compatibility"
D G "RA0_ANALOG" 2 408 "0xE" "!old only provided for compatibility"
D G "RA0_ANALOG_RA3_RA2_REF" 2 409 "0xF" "!old only provided for compatibility"
D G "ADC_START_AND_READ" 2 412 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 2 413 "1"
D G "ADC_READ_ONLY" 2 414 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
F N "abs" 2 420 ""
V L "x" 2 420 "sint8" `204 
F B "abs" 2 420 "sint8(sint8 x)" `203 
F N "abs" 2 421 ""
V L "x" 2 421 "sint16" `206 
F B "abs" 2 421 "sint16(sint16 x)" `205 
F N "abs" 2 422 ""
V L "x" 2 422 "sint32" `208 
F B "abs" 2 422 "sint32(sint32 x)" `207 
F N "abs" 2 423 ""
V L "x" 2 423 "float" `210 
F B "abs" 2 423 "float(float x)" `209 
F N "_mul" 2 424 ""
V L "??65535" 2 424 "int8" `212 
V L "??65535" 2 424 "int8" `213 
F B "_mul" 2 424 "int16(int8 ,int8 )" `211 
F N "_mul" 2 425 ""
V L "??65535" 2 425 "sint8" `215 
V L "??65535" 2 425 "sint8" `216 
F B "_mul" 2 425 "sint16(sint8 ,sint8 )" `214 
F N "_mul" 2 426 ""
V L "??65535" 2 426 "int16" `218 
V L "??65535" 2 426 "int16" `219 
F B "_mul" 2 426 "int32(int16 ,int16 )" `217 
F N "_mul" 2 427 ""
V L "??65535" 2 427 "sint16" `221 
V L "??65535" 2 427 "sint16" `222 
F B "_mul" 2 427 "sint32(sint16 ,sint16 )" `220  "Memory Manipulation Prototypes:"
F N "read_bank" 2 430 ""
V L "bank" 2 430 "int8" `224 
V L "offset" 2 430 "int8" `225 
F B "read_bank" 2 430 "int8(int8 bank,int8 offset)" `223 
F N "write_bank" 2 431 ""
V L "bank" 2 431 "int8" `227 
V L "offset" 2 431 "int8" `228 
V L "value" 2 431 "int8" `229 
F B "write_bank" 2 431 "void(int8 bank,int8 offset,int8 value)" `226 
F N "strcpy" 2 432 ""
V L "dest" 2 432 "*int8" `231 
V L "src" 2 432 "*int8" `232 
F B "strcpy" 2 432 "void(*int8 dest,*int8 src)" `230 
F N "strcopy" 2 433 ""
V L "dest" 2 433 "*int8" `234 
V L "src" 2 433 "*int8" `235 
F B "strcopy" 2 433 "void(*int8 dest,*int8 src)" `233 
F N "memset" 2 434 ""
V L "destination" 2 434 "*int8" `237 
V L "value" 2 434 "int8" `238 
V L "num" 2 434 "int16" `239 
F B "memset" 2 434 "void(*int8 destination,int8 value,int16 num)" `236 
F N "memcpy" 2 435 ""
V L "destination" 2 435 "*int8" `241 
V L "source" 2 435 "*int8" `242 
V L "num" 2 435 "int16" `243 
F B "memcpy" 2 435 "void(*int8 destination,*int8 source,int16 num)" `240  "String Prototypes:"
F N "toupper" 2 438 ""
V L "cvalue" 2 438 "int8" `245 
F B "toupper" 2 438 "int8(int8 cvalue)" `244 
F N "tolower" 2 439 ""
V L "cvalue" 2 439 "int8" `247 
F B "tolower" 2 439 "int8(int8 cvalue)" `246 
F N "sprintf" 2 440 ""
V L "string" 2 440 "*int8" `249 
V L "cstring" 2 440 "*int8" `250 
F B "sprintf" 2 440 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `248  "Data Manipulators Prototypes:"
F N "shift_left" 2 443 ""
V L "address" 2 443 "*int8" `253 
V L "bytes" 2 443 "int8" `254 
V L "value" 2 443 "int8" `255 
F B "shift_left" 2 443 "int8(*int8 address,int8 bytes,int8 value)" `252 
F N "shift_right" 2 444 ""
V L "address" 2 444 "*int8" `257 
V L "bytes" 2 444 "int8" `258 
V L "value" 2 444 "int8" `259 
F B "shift_right" 2 444 "int8(*int8 address,int8 bytes,int8 value)" `256 
F N "rotate_left" 2 445 ""
V L "address" 2 445 "*int8" `261 
V L "bytes" 2 445 "int8" `262 
F B "rotate_left" 2 445 "void(*int8 address,int8 bytes)" `260 
F N "rotate_right" 2 446 ""
V L "address" 2 446 "*int8" `264 
V L "bytes" 2 446 "int8" `265 
F B "rotate_right" 2 446 "void(*int8 address,int8 bytes)" `263 
F N "swap" 2 447 ""
V L "value" 2 447 "int8" `267 
F B "swap" 2 447 "void(int8 value)" `266 
F N "make8" 2 448 ""
V L "var" 2 448 "int16" `269 
V L "offset" 2 448 "int8" `270 
F B "make8" 2 448 "int8(int16 var,int8 offset)" `268 
F N "make8" 2 449 ""
V L "var" 2 449 "int32" `272 
V L "offset" 2 449 "int8" `273 
F B "make8" 2 449 "int8(int32 var,int8 offset)" `271 
F N "make16" 2 450 ""
V L "varhigh" 2 450 "int8" `275 
V L "varlow" 2 450 "int8" `276 
F B "make16" 2 450 "int16(int8 varhigh,int8 varlow)" `274 
F N "make32" 2 451 ""
V L "var1" 2 451 "int16" `278 
F B "make32" 2 451 "int32(int16 var1)" `277 
F N "make32" 2 452 ""
V L "var1" 2 452 "int16" `280 
V L "var2" 2 452 "int16" `281 
F B "make32" 2 452 "int32(int16 var1,int16 var2)" `279 
F N "make32" 2 453 ""
V L "var1" 2 453 "int16" `283 
V L "var2" 2 453 "int8" `284 
F B "make32" 2 453 "int32(int16 var1,int8 var2)" `282 
F N "make32" 2 454 ""
V L "var1" 2 454 "int16" `286 
V L "var2" 2 454 "int8" `287 
V L "var3" 2 454 "int8" `288 
F B "make32" 2 454 "int32(int16 var1,int8 var2,int8 var3)" `285 
F N "make32" 2 455 ""
V L "var1" 2 455 "int8" `290 
F B "make32" 2 455 "int32(int8 var1)" `289 
F N "make32" 2 456 ""
V L "var1" 2 456 "int8" `292 
V L "var2" 2 456 "int8" `293 
F B "make32" 2 456 "int32(int8 var1,int8 var2)" `291 
F N "make32" 2 457 ""
V L "var1" 2 457 "int8" `295 
V L "var2" 2 457 "int8" `296 
V L "var3" 2 457 "int8" `297 
F B "make32" 2 457 "int32(int8 var1,int8 var2,int8 var3)" `294 
F N "make32" 2 458 ""
V L "var1" 2 458 "int8" `299 
V L "var2" 2 458 "int8" `300 
V L "var3" 2 458 "int8" `301 
V L "var4" 2 458 "int8" `302 
F B "make32" 2 458 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `298 
F N "make32" 2 459 ""
V L "var1" 2 459 "int8" `304 
V L "var2" 2 459 "int16" `305 
F B "make32" 2 459 "int32(int8 var1,int16 var2)" `303 
F N "make32" 2 460 ""
V L "var1" 2 460 "int8" `307 
V L "var2" 2 460 "int16" `308 
V L "var3" 2 460 "int8" `309 
F B "make32" 2 460 "int32(int8 var1,int16 var2,int8 var3)" `306 
F N "make32" 2 461 ""
V L "var1" 2 461 "int8" `311 
V L "var2" 2 461 "int8" `312 
V L "var3" 2 461 "int16" `313 
F B "make32" 2 461 "int32(int8 var1,int8 var2,int16 var3)" `310 
F N "bit_set" 2 462 ""
V L "var" 2 462 "int8" `315 
V L "bit" 2 462 "int8" `316 
F B "bit_set" 2 462 "void(int8 var,int8 bit)" `314 
F N "bit_set" 2 463 ""
V L "var" 2 463 "int16" `318 
V L "bit" 2 463 "int8" `319 
F B "bit_set" 2 463 "void(int16 var,int8 bit)" `317 
F N "bit_set" 2 464 ""
V L "var" 2 464 "int32" `321 
V L "bit" 2 464 "int8" `322 
F B "bit_set" 2 464 "void(int32 var,int8 bit)" `320 
F N "bit_clear" 2 465 ""
V L "var" 2 465 "int8" `324 
V L "bit" 2 465 "int8" `325 
F B "bit_clear" 2 465 "void(int8 var,int8 bit)" `323 
F N "bit_clear" 2 466 ""
V L "var" 2 466 "int16" `327 
V L "bit" 2 466 "int8" `328 
F B "bit_clear" 2 466 "void(int16 var,int8 bit)" `326 
F N "bit_clear" 2 467 ""
V L "var" 2 467 "int32" `330 
V L "bit" 2 467 "int8" `331 
F B "bit_clear" 2 467 "void(int32 var,int8 bit)" `329 
F N "bit_test" 2 468 ""
V L "var" 2 468 "int8" `333 
V L "bit" 2 468 "int8" `334 
F B "bit_test" 2 468 "int8(int8 var,int8 bit)" `332 
F N "bit_test" 2 469 ""
V L "var" 2 469 "int16" `336 
V L "bit" 2 469 "int8" `337 
F B "bit_test" 2 469 "int8(int16 var,int8 bit)" `335 
F N "bit_test" 2 470 ""
V L "var" 2 470 "int32" `339 
V L "bit" 2 470 "int8" `340 
F B "bit_test" 2 470 "int8(int32 var,int8 bit)" `338  "#use delay() Prototypes:"
F N "delay_cycles" 2 473 ""
V L "count" 2 473 "int8" `342 
F B "delay_cycles" 2 473 "void(int8 count)" `341 
F N "delay_ms" 2 474 ""
V L "time" 2 474 "int16" `344 
F B "delay_ms" 2 474 "void(int16 time)" `343 
F N "delay_us" 2 475 ""
V L "time" 2 475 "int16" `346 
F B "delay_us" 2 475 "void(int16 time)" `345  "#use rs232() Prototypes:"
F N "putchar" 2 478 ""
V L "cdata" 2 478 "int8" `348 
F B "putchar" 2 478 "void(int8 cdata)" `347 
F N "putchar" 2 479 ""
V L "cdata" 2 479 "int8" `350 
V L "stream" 2 479 "int8" `351 
F B "putchar" 2 479 "void(int8 cdata,int8 stream)" `349 
F N "puts" 2 480 ""
V L "string" 2 480 "*int8" `353 
F B "puts" 2 480 "void(*int8 string)" `352 
F N "puts" 2 481 ""
V L "string" 2 481 "*int8" `355 
V L "stream" 2 481 "int8" `356 
F B "puts" 2 481 "void(*int8 string,int8 stream)" `354 
F N "getch" 2 482 ""
F B "getch" 2 482 "int8()" `357 
F N "getch" 2 483 ""
V L "stream" 2 483 "int8" `359 
F B "getch" 2 483 "int8(int8 stream)" `358 
F N "gets" 2 484 ""
V L "string" 2 484 "*int8" `361 
F B "gets" 2 484 "void(*int8 string)" `360 
F N "gets" 2 485 ""
V L "string" 2 485 "*int8" `363 
V L "stream" 2 485 "int8" `364 
F B "gets" 2 485 "void(*int8 string,int8 stream)" `362 
F N "kbhit" 2 486 ""
F B "kbhit" 2 486 "int8()" `365 
F N "kbhit" 2 487 ""
V L "stream" 2 487 "int8" `367 
F B "kbhit" 2 487 "int8(int8 stream)" `366 
F N "printf" 2 488 ""
V L "string" 2 488 "*int8" `369 
F B "printf" 2 488 "void(*int8 string,*int8 _VA_LIST)" `368 
F N "fprintf" 2 489 ""
V L "stream" 2 489 "int8" `372 
V L "string" 2 489 "*int8" `373 
F B "fprintf" 2 489 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `371 
F N "putc_send" 2 490 ""
F B "putc_send" 2 490 "void()" `375 
F N "fputc_send" 2 491 ""
V L "stream" 2 491 "int8" `377 
F B "fputc_send" 2 491 "void(int8 stream)" `376 
F N "rcv_buffer_full" 2 492 ""
F B "rcv_buffer_full" 2 492 "int8()" `378 
F N "rcv_buffer_full" 2 493 ""
V L "stream" 2 493 "int8" `380 
F B "rcv_buffer_full" 2 493 "int8(int8 stream)" `379 
F N "rcv_buffer_bytes" 2 494 ""
F B "rcv_buffer_bytes" 2 494 "int16()" `381 
F N "rcv_buffer_bytes" 2 495 ""
V L "stream" 2 495 "int8" `383 
F B "rcv_buffer_bytes" 2 495 "int16(int8 stream)" `382 
F N "tx_buffer_full" 2 496 ""
F B "tx_buffer_full" 2 496 "int8()" `384 
F N "tx_buffer_full" 2 497 ""
V L "stream" 2 497 "int8" `386 
F B "tx_buffer_full" 2 497 "int8(int8 stream)" `385 
F N "tx_buffer_bytes" 2 498 ""
F B "tx_buffer_bytes" 2 498 "int16()" `387 
F N "tx_buffer_bytes" 2 499 ""
V L "stream" 2 499 "int8" `389 
F B "tx_buffer_bytes" 2 499 "int16(int8 stream)" `388  "#use i2c() Prototypes:"
F N "i2c_read" 2 502 ""
F B "i2c_read" 2 502 "int8()" `390 
F N "i2c_read" 2 503 ""
V L "stream" 2 503 "int8" `392 
F B "i2c_read" 2 503 "int8(int8 stream)" `391 
F N "i2c_read" 2 504 ""
V L "stream" 2 504 "int8" `394 
V L "ack" 2 504 "int8" `395 
F B "i2c_read" 2 504 "int8(int8 stream,int8 ack)" `393 
F N "i2c_write" 2 505 ""
V L "data" 2 505 "int8" `397 
F B "i2c_write" 2 505 "int8(int8 data)" `396 
F N "i2c_write" 2 506 ""
V L "stream" 2 506 "int8" `399 
V L "data" 2 506 "int8" `400 
F B "i2c_write" 2 506 "int8(int8 stream,int8 data)" `398 
F N "i2c_start" 2 507 ""
F B "i2c_start" 2 507 "void()" `401 
F N "i2c_start" 2 508 ""
V L "stream" 2 508 "int8" `403 
F B "i2c_start" 2 508 "void(int8 stream)" `402 
F N "i2c_start" 2 509 ""
V L "stream" 2 509 "int8" `405 
V L "restart" 2 509 "int8" `406 
F B "i2c_start" 2 509 "void(int8 stream,int8 restart)" `404 
F N "i2c_stop" 2 510 ""
F B "i2c_stop" 2 510 "void()" `407 
F N "i2c_stop" 2 511 ""
V L "stream" 2 511 "int8" `409 
F B "i2c_stop" 2 511 "void(int8 stream)" `408 
F N "i2c_isr_state" 2 512 ""
F B "i2c_isr_state" 2 512 "int8()" `410 
F N "i2c_slaveaddr" 2 513 ""
V L "addr" 2 513 "int8" `412 
F B "i2c_slaveaddr" 2 513 "void(int8 addr)" `411 
F N "i2c_slaveaddr" 2 514 ""
V L "stream" 2 514 "int8" `414 
V L "addr" 2 514 "int8" `415 
F B "i2c_slaveaddr" 2 514 "void(int8 stream,int8 addr)" `413 
F N "i2c_poll" 2 515 ""
F B "i2c_poll" 2 515 "int8()" `416 
F N "i2c_poll" 2 516 ""
V L "stream" 2 516 "int8" `418 
F B "i2c_poll" 2 516 "int8(int8 stream)" `417 
F N "i2c_init" 2 517 ""
V L "baud" 2 517 "int32" `420 
F B "i2c_init" 2 517 "void(int32 baud)" `419 
F N "i2c_init" 2 518 ""
V L "stream" 2 518 "int8" `422 
V L "baud" 2 518 "int32" `423 
F B "i2c_init" 2 518 "void(int8 stream,int32 baud)" `421  "#use spi() Prototypes:"
F N "spi_xfer" 2 521 ""
F B "spi_xfer" 2 521 "int8()" `424 
F N "spi_xfer" 2 522 ""
f G "spi_xfer" 2 522 "int16(int8 data)" `425 
F N "spi_xfer" 2 523 ""
f G "spi_xfer" 2 523 "int32(int8 data)" `425 
F N "spi_xfer" 2 524 ""
V L "data" 2 524 "int8" `426 
F B "spi_xfer" 2 524 "int8(int8 data)" `425 
F N "spi_xfer" 2 525 ""
V L "data" 2 525 "int16" `428 
F B "spi_xfer" 2 525 "int16(int16 data)" `427 
F N "spi_xfer" 2 526 ""
V L "data" 2 526 "int32" `430 
F B "spi_xfer" 2 526 "int32(int32 data)" `429 
F N "spi_xfer" 2 527 ""
V L "stream" 2 527 "int8" `432 
V L "data" 2 527 "int8" `433 
F B "spi_xfer" 2 527 "int8(int8 stream,int8 data)" `431 
F N "spi_xfer" 2 528 ""
V L "stream" 2 528 "int8" `435 
V L "data" 2 528 "int16" `436 
F B "spi_xfer" 2 528 "int16(int8 stream,int16 data)" `434 
F N "spi_xfer" 2 529 ""
V L "stream" 2 529 "int8" `438 
V L "data" 2 529 "int32" `439 
F B "spi_xfer" 2 529 "int32(int8 stream,int32 data)" `437 
F N "spi_xfer" 2 530 ""
V L "stream" 2 530 "int8" `441 
V L "data" 2 530 "int8" `442 
V L "bits" 2 530 "int8" `443 
F B "spi_xfer" 2 530 "int8(int8 stream,int8 data,int8 bits)" `440 
F N "spi_xfer" 2 531 ""
V L "stream" 2 531 "int8" `445 
V L "data" 2 531 "int16" `446 
V L "bits" 2 531 "int8" `447 
F B "spi_xfer" 2 531 "int16(int8 stream,int16 data,int8 bits)" `444 
F N "spi_xfer" 2 532 ""
V L "stream" 2 532 "int8" `449 
V L "data" 2 532 "int32" `450 
V L "bits" 2 532 "int8" `451 
F B "spi_xfer" 2 532 "int32(int8 stream,int32 data,int8 bits)" `448 
F N "spi_init" 2 533 ""
V L "baud" 2 533 "int32" `453 
F B "spi_init" 2 533 "void(int32 baud)" `452 
F N "spi_init" 2 534 ""
V L "stream" 2 534 "int8" `455 
V L "baud" 2 534 "int32" `456 
F B "spi_init" 2 534 "void(int8 stream,int32 baud)" `454 
F N "spi_speed" 2 535 ""
V L "baud" 2 535 "int32" `458 
F B "spi_speed" 2 535 "void(int32 baud)" `457 
F N "spi_speed" 2 536 ""
V L "stream" 2 536 "int8" `460 
V L "baud" 2 536 "int32" `461 
F B "spi_speed" 2 536 "void(int8 stream,int32 baud)" `459 
F N "spi_speed" 2 537 ""
V L "stream" 2 537 "int8" `463 
V L "baud" 2 537 "int32" `464 
V L "clock" 2 537 "int32" `465 
F B "spi_speed" 2 537 "void(int8 stream,int32 baud,int32 clock)" `462 
F N "spi_prewrite" 2 538 ""
V L "data" 2 538 "int8" `467 
F B "spi_prewrite" 2 538 "void(int8 data)" `466 
F N "spi_prewrite" 2 539 ""
V L "data" 2 539 "int16" `469 
F B "spi_prewrite" 2 539 "void(int16 data)" `468 
F N "spi_prewrite" 2 540 ""
V L "data" 2 540 "int32" `471 
F B "spi_prewrite" 2 540 "void(int32 data)" `470 
F N "spi_prewrite" 2 541 ""
V L "??65535" 2 541 "int8" `473 
V L "data" 2 541 "int8" `474 
F B "spi_prewrite" 2 541 "void(int8 ,int8 data)" `472 
F N "spi_prewrite" 2 542 ""
V L "??65535" 2 542 "int8" `476 
V L "data" 2 542 "int16" `477 
F B "spi_prewrite" 2 542 "void(int8 ,int16 data)" `475 
F N "spi_prewrite" 2 543 ""
V L "??65535" 2 543 "int8" `479 
V L "data" 2 543 "int32" `480 
F B "spi_prewrite" 2 543 "void(int8 ,int32 data)" `478 
F N "spi_xfer_in" 2 544 ""
F B "spi_xfer_in" 2 544 "int8()" `481 
F N "spi_xfer_in" 2 545 ""
f G "spi_xfer_in" 2 545 "int16(int8 bits)" `482 
F N "spi_xfer_in" 2 546 ""
f G "spi_xfer_in" 2 546 "int32(int8 bits)" `482 
F N "spi_xfer_in" 2 547 ""
V L "bits" 2 547 "int8" `483 
F B "spi_xfer_in" 2 547 "int8(int8 bits)" `482 
F N "spi_xfer_in" 2 548 ""
V L "bits" 2 548 "int8" `485 
f G "spi_xfer_in" 2 548 "int16(int8 bits,int8 bits)" `484 
F N "spi_xfer_in" 2 549 ""
V L "bits" 2 549 "int8" `485 
f G "spi_xfer_in" 2 549 "int32(int8 bits,int8 bits)" `484 
F N "spi_xfer_in" 2 550 ""
V L "stream" 2 550 "int8" `485 
V L "bits" 2 550 "int8" `486 
F B "spi_xfer_in" 2 550 "int8(int8 stream,int8 bits)" `484 
F N "spi_xfer_in" 2 551 ""
V L "stream" 2 551 "int8" `485 
V L "bits" 2 551 "int8" `489 
f G "spi_xfer_in" 2 551 "int16(int8 stream,int8 bits,int8 task)" `487 
F N "spi_xfer_in" 2 552 ""
V L "stream" 2 552 "int8" `485 
V L "bits" 2 552 "int8" `489 
f G "spi_xfer_in" 2 552 "int32(int8 stream,int8 bits,int8 task)" `487  "#use rtos() Prototypes:"
F N "rtos_run" 2 555 ""
F B "rtos_run" 2 555 "void(int8 stream,int8 bits,int8 task)" `487 
F N "rtos_yield" 2 556 ""
F B "rtos_yield" 2 556 "void(int8 bits,int8 task)" `488 
F N "rtos_enable" 2 557 ""
V L "task" 2 557 "int8" `490 
F B "rtos_enable" 2 557 "void(int8 task)" `489 
F N "rtos_disable" 2 558 ""
V L "task" 2 558 "int8" `492 
F B "rtos_disable" 2 558 "void(int8 task)" `491 
F N "rtos_terminate" 2 559 ""
F B "rtos_terminate" 2 559 "void()" `493 
F N "rtos_await" 2 560 ""
V L "flag" 2 560 "int8" `495 
F B "rtos_await" 2 560 "void(int8 flag)" `494 
F N "rtos_wait" 2 561 ""
V L "sem" 2 561 "int8" `497 
F B "rtos_wait" 2 561 "void(int8 sem)" `496 
F N "rtos_signal" 2 562 ""
V L "sem" 2 562 "int8" `499 
F B "rtos_signal" 2 562 "void(int8 sem)" `498 
F N "rtos_msg_send" 2 563 ""
V L "task" 2 563 "int8" `501 
V L "msg" 2 563 "int8" `502 
F B "rtos_msg_send" 2 563 "void(int8 task,int8 msg)" `500 
F N "rtos_msg_read" 2 564 ""
F B "rtos_msg_read" 2 564 "int8()" `503 
F N "rtos_msg_poll" 2 565 ""
F B "rtos_msg_poll" 2 565 "int8()" `504 
F N "rtos_overrun" 2 566 ""
V L "task" 2 566 "int8" `506 
F B "rtos_overrun" 2 566 "int8(int8 task)" `505 
F N "rtos_stats" 2 567 ""
V L "task" 2 567 "int8" `508 
V L "stat" 2 567 "*int8" `509 
F B "rtos_stats" 2 567 "void(int8 task,*int8 stat)" `507  "#use timer() Prototypes:"
F N "get_ticks" 2 570 ""
F B "get_ticks" 2 570 "int8()" `510 
F N "get_ticks" 2 571 ""
f G "get_ticks" 2 571 "int16(int8 stream)" `511 
F N "get_ticks" 2 572 ""
f G "get_ticks" 2 572 "int32(int8 stream)" `511 
F N "get_ticks" 2 573 ""
V L "stream" 2 573 "int8" `512 
F B "get_ticks" 2 573 "int8(int8 stream)" `511 
F N "get_ticks" 2 574 ""
V L "stream" 2 574 "int8" `514 
f G "get_ticks" 2 574 "int16(int8 stream)" `513 
F N "get_ticks" 2 575 ""
V L "stream" 2 575 "int8" `514 
f G "get_ticks" 2 575 "int32(int8 stream)" `513 
F N "set_ticks" 2 576 ""
V L "value" 2 576 "int8" `514 
F B "set_ticks" 2 576 "void(int8 value)" `513 
F N "set_ticks" 2 577 ""
V L "value" 2 577 "int16" `516 
F B "set_ticks" 2 577 "void(int16 value)" `515 
F N "set_ticks" 2 578 ""
V L "value" 2 578 "int32" `518 
F B "set_ticks" 2 578 "void(int32 value)" `517 
F N "set_ticks" 2 579 ""
V L "stream" 2 579 "int8" `520 
V L "value" 2 579 "int8" `521 
F B "set_ticks" 2 579 "void(int8 stream,int8 value)" `519 
F N "set_ticks" 2 580 ""
V L "stream" 2 580 "int8" `523 
V L "value" 2 580 "int16" `524 
F B "set_ticks" 2 580 "void(int8 stream,int16 value)" `522 
F N "set_ticks" 2 581 ""
V L "stream" 2 581 "int8" `526 
V L "value" 2 581 "int32" `527 
F B "set_ticks" 2 581 "void(int8 stream,int32 value)" `525  "#use pwm() Prototypes:"
F N "pwm_on" 2 584 ""
F B "pwm_on" 2 584 "void()" `528 
F N "pwm_on" 2 585 ""
V L "stream" 2 585 "int8" `530 
F B "pwm_on" 2 585 "void(int8 stream)" `529 
F N "pwm_off" 2 586 ""
F B "pwm_off" 2 586 "void()" `531 
F N "pwm_off" 2 587 ""
V L "stream" 2 587 "int8" `533 
F B "pwm_off" 2 587 "void(int8 stream)" `532 
F N "pwm_set_duty" 2 588 ""
V L "duty" 2 588 "int16" `535 
F B "pwm_set_duty" 2 588 "void(int16 duty)" `534 
F N "pwm_set_duty" 2 589 ""
V L "stream" 2 589 "int8" `537 
V L "duty" 2 589 "int16" `538 
F B "pwm_set_duty" 2 589 "void(int8 stream,int16 duty)" `536 
F N "pwm_set_duty_percent" 2 590 ""
V L "percent" 2 590 "int16" `540 
F B "pwm_set_duty_percent" 2 590 "void(int16 percent)" `539 
F N "pwm_set_duty_percent" 2 591 ""
V L "stream" 2 591 "int8" `542 
V L "percent" 2 591 "int16" `543 
F B "pwm_set_duty_percent" 2 591 "void(int8 stream,int16 percent)" `541 
F N "pwm_set_frequency" 2 592 ""
V L "frequency" 2 592 "int32" `545 
F B "pwm_set_frequency" 2 592 "void(int32 frequency)" `544 
F N "pwm_set_frequency" 2 593 ""
V L "stream" 2 593 "int8" `547 
V L "frequency" 2 593 "int32" `548 
F B "pwm_set_frequency" 2 593 "void(int8 stream,int32 frequency)" `546  "#use capture() Prototypes:"
F N "get_capture_time" 2 596 ""
F B "get_capture_time" 2 596 "int16()" `549 
F N "get_capture_time" 2 597 ""
V L "stream" 2 597 "int8" `551 
F B "get_capture_time" 2 597 "int16(int8 stream)" `550 
F N "get_capture_event" 2 598 ""
F B "get_capture_event" 2 598 "int8()" `552 
F N "get_capture_event" 2 599 ""
V L "stream" 2 599 "int8" `554 
F B "get_capture_event" 2 599 "int8(int8 stream)" `553  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
F N "goto_address" 2 612 ""
V L "address" 2 612 "int16" `556 
F B "goto_address" 2 612 "void(int16 address)" `555 
F N "label_address" 2 613 ""
V L "label" 2 613 "int16" `558 
F B "label_address" 2 613 "int16(int16 label)" `557  "Program Memory Prototypes:"
F N "read_program_memory" 2 616 ""
V L "address" 2 616 "int16" `560 
V L "dataptr" 2 616 "*int8" `561 
V L "count" 2 616 "int16" `562 
F B "read_program_memory" 2 616 "void(int16 address,*int8 dataptr,int16 count)" `559 
F N "read_program_eeprom" 2 617 ""
V L "address" 2 617 "int16" `564 
F B "read_program_eeprom" 2 617 "int16(int16 address)" `563 
F N "erase_program_eeprom" 2 618 ""
V L "address" 2 618 "int16" `566 
F B "erase_program_eeprom" 2 618 "void(int16 address)" `565 
F N "write_program_memory" 2 619 ""
V L "address" 2 619 "int16" `568 
V L "dataptr" 2 619 "*int8" `569 
V L "count" 2 619 "int16" `570 
F B "write_program_memory" 2 619 "void(int16 address,*int8 dataptr,int16 count)" `567 
F N "write_program_eeprom" 2 620 ""
V L "address" 2 620 "int16" `572 
V L "data" 2 620 "int16" `573 
F B "write_program_eeprom" 2 620 "void(int16 address,int16 data)" `571  "EEPROM Prototypes:"
T G "__EEADDRESS__" 2 625 "int16" `574 
F N "read_eeprom" 2 630 ""
V L "address" 2 630 "__EEADDRESS__" `576 
F B "read_eeprom" 2 630 "int8(__EEADDRESS__ address)" `575 
F N "write_eeprom" 2 631 ""
V L "address" 2 631 "__EEADDRESS__" `578 
V L "value" 2 631 "int8" `579 
F B "write_eeprom" 2 631 "void(__EEADDRESS__ address,int8 value)" `577  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
F N "enable_interrupts" 2 638 ""
V L "interrupt" 2 638 "int32" `581 
F B "enable_interrupts" 2 638 "void(int32 interrupt)" `580 
F N "disable_interrupts" 2 639 ""
V L "interrupt" 2 639 "int32" `583 
F B "disable_interrupts" 2 639 "void(int32 interrupt)" `582 
F N "clear_interrupt" 2 640 ""
V L "interrupt" 2 640 "int32" `585 
F B "clear_interrupt" 2 640 "void(int32 interrupt)" `584 
F N "interrupt_active" 2 641 ""
V L "interrupt" 2 641 "int32" `587 
F B "interrupt_active" 2 641 "int8(int32 interrupt)" `586 
F N "interrupt_enabled" 2 642 ""
V L "interrupt" 2 642 "int32" `589 
F B "interrupt_enabled" 2 642 "int8(int32 interrupt)" `588 
F N "ext_int_edge" 2 643 ""
V L "source" 2 643 "int8" `591 
V L "edge" 2 643 "int8" `592 
F B "ext_int_edge" 2 643 "void(int8 source,int8 edge)" `590 
F N "jump_to_irs" 2 644 ""
V L "address" 2 644 "int16" `594 
F B "jump_to_irs" 2 644 "void(int16 address)" `593  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 2 646 "0x40"
D G "H_TO_L" 2 647 "0"
D G "GLOBAL" 2 649 "0x0BC0"
D G "PERIPH" 2 650 "0x0B40"
D G "INT_RTCC" 2 651 "0x000B20"
D G "INT_RB" 2 652 "0x00FF0B08"
D G "INT_EXT_L2H" 2 653 "0x50000B10"
D G "INT_EXT_H2L" 2 654 "0x60000B10"
D G "INT_EXT" 2 655 "0x000B10"
D G "INT_AD" 2 656 "0x008C40"
D G "INT_TBE" 2 657 "0x008C10"
D G "INT_RDA" 2 658 "0x008C20"
D G "INT_TIMER1" 2 659 "0x008C01"
D G "INT_TIMER2" 2 660 "0x008C02"
D G "INT_CCP1" 2 661 "0x008C04"
D G "INT_CCP2" 2 662 "0x008D01"
D G "INT_SSP" 2 663 "0x008C08"
D G "INT_PSP" 2 664 "0x008C80"
D G "INT_BUSCOL" 2 665 "0x008D08"
D G "INT_EEPROM" 2 666 "0x008D10"
D G "INT_TIMER0" 2 667 "0x000B20"
D G "INT_COMP" 2 668 "0x008D40"
V G "value" 0 2 "int16" `599 
F N "main" 0 3 ""
F G "main" 0 4 "void()" `600 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
