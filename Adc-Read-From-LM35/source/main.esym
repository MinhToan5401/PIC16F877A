D G "__PCM__" 0 85 ""5.109""
D G "__DEVICE__" 0 85 "887"
D G "__DATE__" 0 85 ""3-Apr-23""
D G "__TIME__" 0 85 ""09:18:26""
D G "_UNICODE" 0 85 ""?""
D G "__EVAL" 0 85 ""?"" "Standard Header file for the PIC16F887 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
F N "set_tris_a" 2 39 ""
V L "value" 2 39 "int8" `55 
F B "set_tris_a" 2 39 "void(int8 value)" `54 
F N "set_tris_b" 2 40 ""
V L "value" 2 40 "int8" `57 
F B "set_tris_b" 2 40 "void(int8 value)" `56 
F N "set_tris_c" 2 41 ""
V L "value" 2 41 "int8" `59 
F B "set_tris_c" 2 41 "void(int8 value)" `58 
F N "set_tris_d" 2 42 ""
V L "value" 2 42 "int8" `61 
F B "set_tris_d" 2 42 "void(int8 value)" `60 
F N "set_tris_e" 2 43 ""
V L "value" 2 43 "int8" `63 
F B "set_tris_e" 2 43 "void(int8 value)" `62 
F N "get_tris_a" 2 44 ""
F B "get_tris_a" 2 44 "int8()" `64 
F N "get_tris_b" 2 45 ""
F B "get_tris_b" 2 45 "int8()" `65 
F N "get_tris_c" 2 46 ""
F B "get_tris_c" 2 46 "int8()" `66 
F N "get_tris_d" 2 47 ""
F B "get_tris_d" 2 47 "int8()" `67 
F N "get_tris_e" 2 48 ""
F B "get_tris_e" 2 48 "int8()" `68 
F N "output_a" 2 49 ""
V L "value" 2 49 "int8" `70 
F B "output_a" 2 49 "void(int8 value)" `69 
F N "output_b" 2 50 ""
V L "value" 2 50 "int8" `72 
F B "output_b" 2 50 "void(int8 value)" `71 
F N "output_c" 2 51 ""
V L "value" 2 51 "int8" `74 
F B "output_c" 2 51 "void(int8 value)" `73 
F N "output_d" 2 52 ""
V L "value" 2 52 "int8" `76 
F B "output_d" 2 52 "void(int8 value)" `75 
F N "output_e" 2 53 ""
V L "value" 2 53 "int8" `78 
F B "output_e" 2 53 "void(int8 value)" `77 
F N "input_a" 2 54 ""
F B "input_a" 2 54 "int8()" `79 
F N "input_b" 2 55 ""
F B "input_b" 2 55 "int8()" `80 
F N "input_c" 2 56 ""
F B "input_c" 2 56 "int8()" `81 
F N "input_d" 2 57 ""
F B "input_d" 2 57 "int8()" `82 
F N "input_e" 2 58 ""
F B "input_e" 2 58 "int8()" `83 
F N "input_change_a" 2 59 ""
F B "input_change_a" 2 59 "int8()" `84 
F N "input_change_b" 2 60 ""
F B "input_change_b" 2 60 "int8()" `85 
F N "input_change_c" 2 61 ""
F B "input_change_c" 2 61 "int8()" `86 
F N "input_change_d" 2 62 ""
F B "input_change_d" 2 62 "int8()" `87 
F N "input_change_e" 2 63 ""
F B "input_change_e" 2 63 "int8()" `88 
F N "input" 2 64 ""
V L "pin" 2 64 "int16" `90 
F B "input" 2 64 "int8(int16 pin)" `89 
F N "input_state" 2 65 ""
V L "pin" 2 65 "int16" `92 
F B "input_state" 2 65 "int8(int16 pin)" `91 
F N "output_low" 2 66 ""
V L "pin" 2 66 "int16" `94 
F B "output_low" 2 66 "void(int16 pin)" `93 
F N "output_high" 2 67 ""
V L "pin" 2 67 "int16" `96 
F B "output_high" 2 67 "void(int16 pin)" `95 
F N "output_toggle" 2 68 ""
V L "pin" 2 68 "int16" `98 
F B "output_toggle" 2 68 "void(int16 pin)" `97 
F N "output_bit" 2 69 ""
V L "pin" 2 69 "int16" `100 
V L "level" 2 69 "int8" `101 
F B "output_bit" 2 69 "void(int16 pin,int8 level)" `99 
F N "output_float" 2 70 ""
V L "pin" 2 70 "int16" `103 
F B "output_float" 2 70 "void(int16 pin)" `102 
F N "output_drive" 2 71 ""
V L "pin" 2 71 "int16" `105 
F B "output_drive" 2 71 "void(int16 pin)" `104  "Constants used to identify pins in the above are:"
D G "PIN_A0" 2 75 "40"
D G "PIN_A1" 2 76 "41"
D G "PIN_A2" 2 77 "42"
D G "PIN_A3" 2 78 "43"
D G "PIN_A4" 2 79 "44"
D G "PIN_A5" 2 80 "45"
D G "PIN_A6" 2 81 "46"
D G "PIN_A7" 2 82 "47"
D G "PIN_B0" 2 84 "48"
D G "PIN_B1" 2 85 "49"
D G "PIN_B2" 2 86 "50"
D G "PIN_B3" 2 87 "51"
D G "PIN_B4" 2 88 "52"
D G "PIN_B5" 2 89 "53"
D G "PIN_B6" 2 90 "54"
D G "PIN_B7" 2 91 "55"
D G "PIN_C0" 2 93 "56"
D G "PIN_C1" 2 94 "57"
D G "PIN_C2" 2 95 "58"
D G "PIN_C3" 2 96 "59"
D G "PIN_C4" 2 97 "60"
D G "PIN_C5" 2 98 "61"
D G "PIN_C6" 2 99 "62"
D G "PIN_C7" 2 100 "63"
D G "PIN_D0" 2 102 "64"
D G "PIN_D1" 2 103 "65"
D G "PIN_D2" 2 104 "66"
D G "PIN_D3" 2 105 "67"
D G "PIN_D4" 2 106 "68"
D G "PIN_D5" 2 107 "69"
D G "PIN_D6" 2 108 "70"
D G "PIN_D7" 2 109 "71"
D G "PIN_E0" 2 111 "72"
D G "PIN_E1" 2 112 "73"
D G "PIN_E2" 2 113 "74"
D G "PIN_E3" 2 114 "75"
D G "FALSE" 2 117 "0"
D G "TRUE" 2 118 "1"
D G "BYTE" 2 120 "int8"
D G "BOOLEAN" 2 121 "int1"
D G "getc" 2 123 "getch"
D G "fgetc" 2 124 "getch"
D G "getchar" 2 125 "getch"
D G "putc" 2 126 "putchar"
D G "fputc" 2 127 "putchar"
D G "fgets" 2 128 "gets"
D G "fputs" 2 129 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
F N "restart_cause" 2 134 ""
F B "restart_cause" 2 134 "int8()" `106 
F N "reset_cpu" 2 135 ""
F B "reset_cpu" 2 135 "void()" `107 
F N "sleep" 2 136 ""
F B "sleep" 2 136 "void()" `108  "Constants returned from RESTART_CAUSE() are:"
D G "WDT_FROM_SLEEP" 2 138 "3"
D G "WDT_TIMEOUT" 2 139 "11"
D G "MCLR_FROM_SLEEP" 2 140 "19"
D G "MCLR_FROM_RUN" 2 141 "27"
D G "NORMAL_POWER_UP" 2 142 "25"
D G "BROWNOUT_RESTART" 2 143 "26"
c L "sleep" 2 3 5 "FUNCTION"
F N "setup_timer_0" 2 150 ""
V L "mode" 2 150 "int8" `110 
F B "setup_timer_0" 2 150 "void(int8 mode)" `109 
F N "set_timer0" 2 151 ""
V L "value" 2 151 "int8" `112 
F B "set_timer0" 2 151 "void(int8 value)" `111 
F N "get_timer0" 2 152 ""
F B "get_timer0" 2 152 "int8()" `113 
F N "setup_counters" 2 153 ""
V L "mode" 2 153 "int8" `115 
V L "prescaler" 2 153 "int8" `116 
F B "setup_counters" 2 153 "void(int8 mode,int8 prescaler)" `114 
F N "set_rtcc" 2 154 ""
V L "value" 2 154 "int8" `118 
F B "set_rtcc" 2 154 "void(int8 value)" `117 
F N "get_rtcc" 2 155 ""
F B "get_rtcc" 2 155 "int8()" `119  "Constants used for SETUP_TIMER_0() are:"
D G "T0_INTERNAL" 2 157 "0"
D G "T0_EXT_L_TO_H" 2 158 "32"
D G "T0_EXT_H_TO_L" 2 159 "48"
D G "T0_DIV_1" 2 161 "8"
D G "T0_DIV_2" 2 162 "0"
D G "T0_DIV_4" 2 163 "1"
D G "T0_DIV_8" 2 164 "2"
D G "T0_DIV_16" 2 165 "3"
D G "T0_DIV_32" 2 166 "4"
D G "T0_DIV_64" 2 167 "5"
D G "T0_DIV_128" 2 168 "6"
D G "T0_DIV_256" 2 169 "7"
D G "T0_8_BIT" 2 172 "0"
D G "RTCC_INTERNAL" 2 174 "0" "The following are provided for compatibility"
D G "RTCC_EXT_L_TO_H" 2 175 "32" "with older compiler versions"
D G "RTCC_EXT_H_TO_L" 2 176 "48"
D G "RTCC_DIV_1" 2 177 "8"
D G "RTCC_DIV_2" 2 178 "0"
D G "RTCC_DIV_4" 2 179 "1"
D G "RTCC_DIV_8" 2 180 "2"
D G "RTCC_DIV_16" 2 181 "3"
D G "RTCC_DIV_32" 2 182 "4"
D G "RTCC_DIV_64" 2 183 "5"
D G "RTCC_DIV_128" 2 184 "6"
D G "RTCC_DIV_256" 2 185 "7"
D G "RTCC_8_BIT" 2 186 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
F N "setup_wdt" 2 197 ""
V L "mode" 2 197 "int16" `121 
F B "setup_wdt" 2 197 "void(int16 mode)" `120 
F N "restart_wdt" 2 198 ""
F B "restart_wdt" 2 198 "void()" `122  "Constants used for SETUP_WDT() are:"
D G "WDT_18MS" 2 201 "8"
D G "WDT_36MS" 2 202 "9"
D G "WDT_72MS" 2 203 "10"
D G "WDT_144MS" 2 204 "11"
D G "WDT_288MS" 2 205 "12"
D G "WDT_576MS" 2 206 "13"
D G "WDT_1152MS" 2 207 "14"
D G "WDT_2304MS" 2 208 "15"
D G "WDT_ON" 2 213 "0x4000"
D G "WDT_OFF" 2 214 "0"
D G "WDT_DIV_16" 2 215 "0x100"
D G "WDT_DIV_8" 2 216 "0x300"
D G "WDT_DIV_4" 2 217 "0x500"
D G "WDT_DIV_2" 2 218 "0x700"
D G "WDT_TIMES_1" 2 219 "0x900" "Default"
D G "WDT_TIMES_2" 2 220 "0xB00"
D G "WDT_TIMES_4" 2 221 "0xD00"
D G "WDT_TIMES_8" 2 222 "0xF00"
D G "WDT_TIMES_16" 2 223 "0x1100"
D G "WDT_TIMES_32" 2 224 "0x1300"
D G "WDT_TIMES_64" 2 225 "0x1500"
D G "WDT_TIMES_128" 2 226 "0x1700"
c L "restart_wdt" 2 3 3 "FUNCTION"
F N "setup_timer_1" 2 231 ""
V L "mode" 2 231 "int16" `124 
F B "setup_timer_1" 2 231 "void(int16 mode)" `123 
F N "get_timer1" 2 232 ""
F B "get_timer1" 2 232 "int16()" `125 
F N "set_timer1" 2 233 ""
V L "value" 2 233 "int16" `127 
F B "set_timer1" 2 233 "void(int16 value)" `126  "Constants used for SETUP_TIMER_1() are:"
D G "T1_DISABLED" 2 236 "0"
D G "T1_INTERNAL" 2 237 "5"
D G "T1_EXTERNAL" 2 238 "7"
D G "T1_EXTERNAL_SYNC" 2 239 "3"
D G "T1_CLK_OUT" 2 241 "8"
D G "T1_DIV_BY_1" 2 243 "0"
D G "T1_DIV_BY_2" 2 244 "0x10"
D G "T1_DIV_BY_4" 2 245 "0x20"
D G "T1_DIV_BY_8" 2 246 "0x30"
D G "T1_GATE" 2 248 "0x40"
D G "T1_GATE_INVERTED" 2 249 "0xC0"
c L "set_timer1" 2 3 3 "FUNCTION"
F N "setup_timer_2" 2 254 ""
V L "mode" 2 254 "int8" `129 
V L "period" 2 254 "int8" `130 
V L "postscale" 2 254 "int8" `131 
F B "setup_timer_2" 2 254 "void(int8 mode,int8 period,int8 postscale)" `128 
F N "get_timer2" 2 255 ""
F B "get_timer2" 2 255 "int8()" `132 
F N "set_timer2" 2 256 ""
V L "value" 2 256 "int8" `134 
F B "set_timer2" 2 256 "void(int8 value)" `133  "Constants used for SETUP_TIMER_2() are:"
D G "T2_DISABLED" 2 258 "0"
D G "T2_DIV_BY_1" 2 259 "4"
D G "T2_DIV_BY_4" 2 260 "5"
D G "T2_DIV_BY_16" 2 261 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
F N "setup_ccp1" 2 267 ""
V L "mode" 2 267 "int32" `136 
F B "setup_ccp1" 2 267 "void(int32 mode)" `135 
F N "setup_ccp1" 2 268 ""
V L "mode" 2 268 "int32" `138 
V L "pwm" 2 268 "int8" `139 
F B "setup_ccp1" 2 268 "void(int32 mode,int8 pwm)" `137 
F N "set_pwm1_duty" 2 269 ""
V L "value" 2 269 "int16" `141 
F B "set_pwm1_duty" 2 269 "void(int16 value)" `140  "Constants used for SETUP_CCPx() are:"
D G "CCP_OFF" 2 271 "0"
D G "CCP_CAPTURE_FE" 2 272 "4"
D G "CCP_CAPTURE_RE" 2 273 "5"
D G "CCP_CAPTURE_DIV_4" 2 274 "6"
D G "CCP_CAPTURE_DIV_16" 2 275 "7"
D G "CCP_COMPARE_SET_ON_MATCH" 2 276 "8"
D G "CCP_COMPARE_CLR_ON_MATCH" 2 277 "9"
D G "CCP_COMPARE_INT" 2 278 "0xA"
D G "CCP_COMPARE_RESET_TIMER" 2 279 "0xB"
D G "CCP_PWM" 2 280 "0xC"
D G "CCP_PWM_PLUS_1" 2 281 "0x1c"
D G "CCP_PWM_PLUS_2" 2 282 "0x2c"
D G "CCP_PWM_PLUS_3" 2 283 "0x3c"
D G "CCP_PWM_H_H" 2 288 "0x0c"
D G "CCP_PWM_H_L" 2 289 "0x0d"
D G "CCP_PWM_L_H" 2 290 "0x0e"
D G "CCP_PWM_L_L" 2 291 "0x0f"
D G "CCP_PWM_FULL_BRIDGE" 2 293 "0x40"
D G "CCP_PWM_FULL_BRIDGE_REV" 2 294 "0xC0"
D G "CCP_PWM_HALF_BRIDGE" 2 295 "0x80"
D G "CCP_SHUTDOWN_ON_COMP1" 2 297 "0x100000"
D G "CCP_SHUTDOWN_ON_COMP2" 2 298 "0x200000"
D G "CCP_SHUTDOWN_ON_COMP" 2 299 "0x300000"
D G "CCP_SHUTDOWN_ON_INT0" 2 300 "0x400000"
D G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 301 "0x500000"
D G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 302 "0x600000"
D G "CCP_SHUTDOWN_ON_COMP_INT0" 2 303 "0x700000"
D G "CCP_SHUTDOWN_AC_L" 2 305 "0x000000"
D G "CCP_SHUTDOWN_AC_H" 2 306 "0x040000"
D G "CCP_SHUTDOWN_AC_F" 2 307 "0x080000"
D G "CCP_SHUTDOWN_BD_L" 2 309 "0x000000"
D G "CCP_SHUTDOWN_BD_H" 2 310 "0x010000"
D G "CCP_SHUTDOWN_BD_F" 2 311 "0x020000"
D G "CCP_SHUTDOWN_RESTART" 2 313 "0x80000000"
D G "CCP_PULSE_STEERING_A" 2 315 "0x01000000"
D G "CCP_PULSE_STEERING_B" 2 316 "0x02000000"
D G "CCP_PULSE_STEERING_C" 2 317 "0x04000000"
D G "CCP_PULSE_STEERING_D" 2 318 "0x08000000"
D G "CCP_PULSE_STEERING_SYNC" 2 319 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
F N "setup_ccp2" 2 323 ""
V L "mode" 2 323 "int32" `146 
F B "setup_ccp2" 2 323 "void(int32 mode)" `145 
F N "setup_ccp2" 2 324 ""
V L "mode" 2 324 "int32" `148 
V L "pwm" 2 324 "int8" `149 
F B "setup_ccp2" 2 324 "void(int32 mode,int8 pwm)" `147 
F N "set_pwm2_duty" 2 325 ""
V L "value" 2 325 "int16" `151 
F B "set_pwm2_duty" 2 325 "void(int16 value)" `150 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
F N "setup_spi" 2 332 ""
V L "mode" 2 332 "int32" `156 
F B "setup_spi" 2 332 "void(int32 mode)" `155 
F N "spi_write" 2 333 ""
V L "value" 2 333 "int8" `158 
F B "spi_write" 2 333 "void(int8 value)" `157 
F N "spi_read" 2 334 ""
F B "spi_read" 2 334 "int8()" `159 
F N "spi_read" 2 335 ""
V L "value" 2 335 "int8" `161 
F B "spi_read" 2 335 "int8(int8 value)" `160 
F N "spi_data_in" 2 336 ""
F B "spi_data_in" 2 336 "int8()" `162  "Constants used in SETUP_SPI() are:"
D G "SPI_DISABLED" 2 338 "0x00"
D G "SPI_MASTER" 2 339 "0x20"
D G "SPI_SLAVE" 2 340 "0x24"
D G "SPI_SCK_IDLE_HIGH" 2 341 "0x10"
D G "SPI_SCK_IDLE_LOW" 2 342 "0x00"
D G "SPI_CLK_DIV_4" 2 343 "0x00"
D G "SPI_CLK_DIV_16" 2 344 "0x01"
D G "SPI_CLK_DIV_64" 2 345 "0x02"
D G "SPI_CLK_T2" 2 346 "0x03"
D G "SPI_SS_DISABLED" 2 347 "0x01"
D G "SPI_XMIT_L_TO_H" 2 349 "0x4000"
D G "SPI_XMIT_H_TO_L" 2 350 "0x0000"
D G "SPI_SAMPLE_AT_MIDDLE" 2 352 "0x0000"
D G "SPI_SAMPLE_AT_END" 2 353 "0x8000"
D G "SPI_L_TO_H" 2 356 "SPI_SCK_IDLE_LOW"
D G "SPI_H_TO_L" 2 357 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
F N "setup_uart" 2 361 ""
V L "baud" 2 361 "int32" `164 
F B "setup_uart" 2 361 "void(int32 baud)" `163 
F N "setup_uart" 2 362 ""
V L "baud" 2 362 "int32" `166 
V L "stream" 2 362 "int8" `167 
F B "setup_uart" 2 362 "void(int32 baud,int8 stream)" `165 
F N "setup_uart" 2 363 ""
V L "baud" 2 363 "int32" `169 
V L "stream" 2 363 "int8" `170 
V L "clock" 2 363 "int32" `171 
F B "setup_uart" 2 363 "void(int32 baud,int8 stream,int32 clock)" `168 
F N "set_uart_speed" 2 364 ""
V L "baud" 2 364 "int32" `173 
F B "set_uart_speed" 2 364 "void(int32 baud)" `172 
F N "set_uart_speed" 2 365 ""
V L "baud" 2 365 "int32" `175 
V L "stream" 2 365 "int8" `176 
F B "set_uart_speed" 2 365 "void(int32 baud,int8 stream)" `174 
F N "set_uart_speed" 2 366 ""
V L "baud" 2 366 "int32" `178 
V L "stream" 2 366 "int8" `179 
V L "clock" 2 366 "int32" `180 
F B "set_uart_speed" 2 366 "void(int32 baud,int8 stream,int32 clock)" `177  "Constants used in setup_uart() are:"
D G "UART_ADDRESS" 2 370 "2"
D G "UART_DATA" 2 371 "4"
D G "UART_AUTODETECT" 2 372 "8"
D G "UART_AUTODETECT_NOWAIT" 2 373 "9"
D G "UART_WAKEUP_ON_RDA" 2 374 "10"
D G "UART_SEND_BREAK" 2 375 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
F N "setup_comparator" 2 379 ""
V L "mode" 2 379 "int32" `182 
F B "setup_comparator" 2 379 "void(int32 mode)" `181  "Constants used in setup_comparator() are:"
D G "NC_NC_NC_NC" 2 383 "0x00"
D G "NC_NC" 2 384 "0x00"
D G "CP1_A0_A3" 2 387 "0x00090080"
D G "CP1_A1_A3" 2 388 "0x000A0081"
D G "CP1_B3_A3" 2 389 "0x00880082"
D G "CP1_B1_A3" 2 390 "0x00280083"
D G "CP1_A0_VREF" 2 391 "0x00010084"
D G "CP1_A1_VREF" 2 392 "0x00020085"
D G "CP1_B3_VREF" 2 393 "0x00800086"
D G "CP1_B1_VREF" 2 394 "0x00200087"
D G "CP1_OUT_ON_A4" 2 396 "0x00000020"
D G "CP1_INVERT" 2 397 "0x00000010"
D G "CP1_ABSOLUTE_VREF" 2 398 "0x20000000"
D G "CP2_A0_A2" 2 401 "0x00058000"
D G "CP2_A1_A2" 2 402 "0x00068100"
D G "CP2_B3_A2" 2 403 "0x00848200"
D G "CP2_B1_A2" 2 404 "0x00248300"
D G "CP2_A0_VREF" 2 405 "0x00018400"
D G "CP2_A1_VREF" 2 406 "0x00028500"
D G "CP2_B3_VREF" 2 407 "0x00808600"
D G "CP2_B1_VREF" 2 408 "0x00208700"
D G "CP2_OUT_ON_A5" 2 410 "0x00002000"
D G "CP2_INVERT" 2 411 "0x00001000"
D G "CP2_ABSOLUTE_VREF" 2 412 "0x10000000"
D G "CP2_T1_SYNC" 2 415 "0x01000000"
D G "CP2_T1_GATE" 2 416 "0x02000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
F N "setup_vref" 2 424 ""
V L "mode" 2 424 "int8" `186 
F B "setup_vref" 2 424 "void(int8 mode)" `185  "Constants used in setup_vref() are:"
D G "VREF_LOW" 2 426 "0xa0"
D G "VREF_HIGH" 2 427 "0x80"
c L "setup_vref" 2 3 3 "FUNCTION"
F N "setup_oscillator" 2 433 ""
V L "mode" 2 433 "int8" `188 
F B "setup_oscillator" 2 433 "int8(int8 mode)" `187  "Constants used in setup_oscillator() are:"
D G "OSC_31KHZ" 2 435 "1"
D G "OSC_125KHZ" 2 436 "0x11"
D G "OSC_250KHZ" 2 437 "0x21"
D G "OSC_500KHZ" 2 438 "0x31"
D G "OSC_1MHZ" 2 439 "0x41"
D G "OSC_2MHZ" 2 440 "0x51"
D G "OSC_4MHZ" 2 441 "0x61"
D G "OSC_8MHZ" 2 442 "0x71"
D G "OSC_INTRC" 2 443 "1"
D G "OSC_NORMAL" 2 444 "0"
D G "OSC_STATE_STABLE" 2 446 "4"
D G "OSC_31KHZ_STABLE" 2 447 "2"
c L "setup_oscillator" 2 3 4 "FUNCTION"
F N "setup_adc" 2 455 ""
V L "mode" 2 455 "int16" `190 
F B "setup_adc" 2 455 "void(int16 mode)" `189 
F N "read_adc" 2 456 ""
F B "read_adc" 2 456 "int8()" `191 
F N "read_adc" 2 457 ""
V L "mode" 2 457 "int8" `193 
F B "read_adc" 2 457 "int8(int8 mode)" `192 
F N "read_adc" 2 458 ""
f G "read_adc" 2 458 "int16()" `194 
F N "read_adc" 2 459 ""
V L "mode" 2 459 "int8" `195 
f G "read_adc" 2 459 "int16(int8 mode,int32 pins)" `194 
F N "adc_done" 2 460 ""
F B "adc_done" 2 460 "int8(int8 mode,int32 pins)" `194  "Constants used for SETUP_ADC() are:"
D G "ADC_OFF" 2 462 "0" "ADC Off"
D G "ADC_CLOCK_DIV_2" 2 463 "0x100"
D G "ADC_CLOCK_DIV_8" 2 464 "0x40"
D G "ADC_CLOCK_DIV_32" 2 465 "0x80"
D G "ADC_CLOCK_INTERNAL" 2 466 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
F N "setup_adc_ports" 2 469 ""
V L "pins" 2 469 "int32" `196 
F B "setup_adc_ports" 2 469 "void(int32 pins)" `195 
F N "setup_adc_ports" 2 470 ""
V L "pins" 2 470 "int32" `198 
V L "reference" 2 470 "int32" `199 
F B "setup_adc_ports" 2 470 "void(int32 pins,int32 reference)" `197 
F N "set_adc_channel" 2 471 ""
V L "channel" 2 471 "int8" `201 
F B "set_adc_channel" 2 471 "void(int8 channel)" `200  "Constants used in SETUP_ADC_PORTS() are:"
D G "sAN0" 2 475 "1" "| A0"
D G "sAN1" 2 476 "2" "| A1"
D G "sAN2" 2 477 "4" "| A2"
D G "sAN3" 2 478 "8" "| A3"
D G "sAN4" 2 479 "16" "| A5"
D G "sAN5" 2 480 "32" "| E0"
D G "sAN6" 2 481 "64" "| E1"
D G "sAN7" 2 482 "128" "| E2"
D G "sAN8" 2 483 "0x10000" "| B2"
D G "sAN9" 2 484 "0x20000" "| B3"
D G "sAN10" 2 485 "0x40000" "| B1"
D G "sAN11" 2 486 "0x80000" "| B4"
D G "sAN12" 2 487 "0x100000" "| B0"
D G "sAN13" 2 488 "0x200000" "| B5"
D G "NO_ANALOGS" 2 489 "0" "None"
D G "ALL_ANALOG" 2 490 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
D G "VSS_VDD" 2 493 "0x0000" "| Range 0-Vdd"
D G "VSS_VREF" 2 494 "0x1000" "| Range 0-Vref"
D G "VREF_VREF" 2 495 "0x3000" "| Range Vref-Vref"
D G "VREF_VDD" 2 496 "0x2000" "| Range Vref-Vdd"
D G "ADC_START_AND_READ" 2 499 "7" "This is the default if nothing is specified"
D G "ADC_START_ONLY" 2 500 "1"
D G "ADC_READ_ONLY" 2 501 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
F N "abs" 2 507 ""
V L "x" 2 507 "sint8" `203 
F B "abs" 2 507 "sint8(sint8 x)" `202 
F N "abs" 2 508 ""
V L "x" 2 508 "sint16" `205 
F B "abs" 2 508 "sint16(sint16 x)" `204 
F N "abs" 2 509 ""
V L "x" 2 509 "sint32" `207 
F B "abs" 2 509 "sint32(sint32 x)" `206 
F N "abs" 2 510 ""
V L "x" 2 510 "float" `209 
F B "abs" 2 510 "float(float x)" `208 
F N "_mul" 2 511 ""
V L "??65535" 2 511 "int8" `211 
V L "??65535" 2 511 "int8" `212 
F B "_mul" 2 511 "int16(int8 ,int8 )" `210 
F N "_mul" 2 512 ""
V L "??65535" 2 512 "sint8" `214 
V L "??65535" 2 512 "sint8" `215 
F B "_mul" 2 512 "sint16(sint8 ,sint8 )" `213 
F N "_mul" 2 513 ""
V L "??65535" 2 513 "int16" `217 
V L "??65535" 2 513 "int16" `218 
F B "_mul" 2 513 "int32(int16 ,int16 )" `216 
F N "_mul" 2 514 ""
V L "??65535" 2 514 "sint16" `220 
V L "??65535" 2 514 "sint16" `221 
F B "_mul" 2 514 "sint32(sint16 ,sint16 )" `219  "Memory Manipulation Prototypes:"
F N "read_bank" 2 517 ""
V L "bank" 2 517 "int8" `223 
V L "offset" 2 517 "int8" `224 
F B "read_bank" 2 517 "int8(int8 bank,int8 offset)" `222 
F N "write_bank" 2 518 ""
V L "bank" 2 518 "int8" `226 
V L "offset" 2 518 "int8" `227 
V L "value" 2 518 "int8" `228 
F B "write_bank" 2 518 "void(int8 bank,int8 offset,int8 value)" `225 
F N "strcpy" 2 519 ""
V L "dest" 2 519 "*int8" `230 
V L "src" 2 519 "*int8" `231 
F B "strcpy" 2 519 "void(*int8 dest,*int8 src)" `229 
F N "strcopy" 2 520 ""
V L "dest" 2 520 "*int8" `233 
V L "src" 2 520 "*int8" `234 
F B "strcopy" 2 520 "void(*int8 dest,*int8 src)" `232 
F N "memset" 2 521 ""
V L "destination" 2 521 "*int8" `236 
V L "value" 2 521 "int8" `237 
V L "num" 2 521 "int16" `238 
F B "memset" 2 521 "void(*int8 destination,int8 value,int16 num)" `235 
F N "memcpy" 2 522 ""
V L "destination" 2 522 "*int8" `240 
V L "source" 2 522 "*int8" `241 
V L "num" 2 522 "int16" `242 
F B "memcpy" 2 522 "void(*int8 destination,*int8 source,int16 num)" `239  "String Prototypes:"
F N "toupper" 2 525 ""
V L "cvalue" 2 525 "int8" `244 
F B "toupper" 2 525 "int8(int8 cvalue)" `243 
F N "tolower" 2 526 ""
V L "cvalue" 2 526 "int8" `246 
F B "tolower" 2 526 "int8(int8 cvalue)" `245 
F N "sprintf" 2 527 ""
V L "string" 2 527 "*int8" `248 
V L "cstring" 2 527 "*int8" `249 
F B "sprintf" 2 527 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `247  "Data Manipulators Prototypes:"
F N "shift_left" 2 530 ""
V L "address" 2 530 "*int8" `252 
V L "bytes" 2 530 "int8" `253 
V L "value" 2 530 "int8" `254 
F B "shift_left" 2 530 "int8(*int8 address,int8 bytes,int8 value)" `251 
F N "shift_right" 2 531 ""
V L "address" 2 531 "*int8" `256 
V L "bytes" 2 531 "int8" `257 
V L "value" 2 531 "int8" `258 
F B "shift_right" 2 531 "int8(*int8 address,int8 bytes,int8 value)" `255 
F N "rotate_left" 2 532 ""
V L "address" 2 532 "*int8" `260 
V L "bytes" 2 532 "int8" `261 
F B "rotate_left" 2 532 "void(*int8 address,int8 bytes)" `259 
F N "rotate_right" 2 533 ""
V L "address" 2 533 "*int8" `263 
V L "bytes" 2 533 "int8" `264 
F B "rotate_right" 2 533 "void(*int8 address,int8 bytes)" `262 
F N "swap" 2 534 ""
V L "value" 2 534 "int8" `266 
F B "swap" 2 534 "void(int8 value)" `265 
F N "make8" 2 535 ""
V L "var" 2 535 "int16" `268 
V L "offset" 2 535 "int8" `269 
F B "make8" 2 535 "int8(int16 var,int8 offset)" `267 
F N "make8" 2 536 ""
V L "var" 2 536 "int32" `271 
V L "offset" 2 536 "int8" `272 
F B "make8" 2 536 "int8(int32 var,int8 offset)" `270 
F N "make16" 2 537 ""
V L "varhigh" 2 537 "int8" `274 
V L "varlow" 2 537 "int8" `275 
F B "make16" 2 537 "int16(int8 varhigh,int8 varlow)" `273 
F N "make32" 2 538 ""
V L "var1" 2 538 "int16" `277 
F B "make32" 2 538 "int32(int16 var1)" `276 
F N "make32" 2 539 ""
V L "var1" 2 539 "int16" `279 
V L "var2" 2 539 "int16" `280 
F B "make32" 2 539 "int32(int16 var1,int16 var2)" `278 
F N "make32" 2 540 ""
V L "var1" 2 540 "int16" `282 
V L "var2" 2 540 "int8" `283 
F B "make32" 2 540 "int32(int16 var1,int8 var2)" `281 
F N "make32" 2 541 ""
V L "var1" 2 541 "int16" `285 
V L "var2" 2 541 "int8" `286 
V L "var3" 2 541 "int8" `287 
F B "make32" 2 541 "int32(int16 var1,int8 var2,int8 var3)" `284 
F N "make32" 2 542 ""
V L "var1" 2 542 "int8" `289 
F B "make32" 2 542 "int32(int8 var1)" `288 
F N "make32" 2 543 ""
V L "var1" 2 543 "int8" `291 
V L "var2" 2 543 "int8" `292 
F B "make32" 2 543 "int32(int8 var1,int8 var2)" `290 
F N "make32" 2 544 ""
V L "var1" 2 544 "int8" `294 
V L "var2" 2 544 "int8" `295 
V L "var3" 2 544 "int8" `296 
F B "make32" 2 544 "int32(int8 var1,int8 var2,int8 var3)" `293 
F N "make32" 2 545 ""
V L "var1" 2 545 "int8" `298 
V L "var2" 2 545 "int8" `299 
V L "var3" 2 545 "int8" `300 
V L "var4" 2 545 "int8" `301 
F B "make32" 2 545 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `297 
F N "make32" 2 546 ""
V L "var1" 2 546 "int8" `303 
V L "var2" 2 546 "int16" `304 
F B "make32" 2 546 "int32(int8 var1,int16 var2)" `302 
F N "make32" 2 547 ""
V L "var1" 2 547 "int8" `306 
V L "var2" 2 547 "int16" `307 
V L "var3" 2 547 "int8" `308 
F B "make32" 2 547 "int32(int8 var1,int16 var2,int8 var3)" `305 
F N "make32" 2 548 ""
V L "var1" 2 548 "int8" `310 
V L "var2" 2 548 "int8" `311 
V L "var3" 2 548 "int16" `312 
F B "make32" 2 548 "int32(int8 var1,int8 var2,int16 var3)" `309 
F N "bit_set" 2 549 ""
V L "var" 2 549 "int8" `314 
V L "bit" 2 549 "int8" `315 
F B "bit_set" 2 549 "void(int8 var,int8 bit)" `313 
F N "bit_set" 2 550 ""
V L "var" 2 550 "int16" `317 
V L "bit" 2 550 "int8" `318 
F B "bit_set" 2 550 "void(int16 var,int8 bit)" `316 
F N "bit_set" 2 551 ""
V L "var" 2 551 "int32" `320 
V L "bit" 2 551 "int8" `321 
F B "bit_set" 2 551 "void(int32 var,int8 bit)" `319 
F N "bit_clear" 2 552 ""
V L "var" 2 552 "int8" `323 
V L "bit" 2 552 "int8" `324 
F B "bit_clear" 2 552 "void(int8 var,int8 bit)" `322 
F N "bit_clear" 2 553 ""
V L "var" 2 553 "int16" `326 
V L "bit" 2 553 "int8" `327 
F B "bit_clear" 2 553 "void(int16 var,int8 bit)" `325 
F N "bit_clear" 2 554 ""
V L "var" 2 554 "int32" `329 
V L "bit" 2 554 "int8" `330 
F B "bit_clear" 2 554 "void(int32 var,int8 bit)" `328 
F N "bit_test" 2 555 ""
V L "var" 2 555 "int8" `332 
V L "bit" 2 555 "int8" `333 
F B "bit_test" 2 555 "int8(int8 var,int8 bit)" `331 
F N "bit_test" 2 556 ""
V L "var" 2 556 "int16" `335 
V L "bit" 2 556 "int8" `336 
F B "bit_test" 2 556 "int8(int16 var,int8 bit)" `334 
F N "bit_test" 2 557 ""
V L "var" 2 557 "int32" `338 
V L "bit" 2 557 "int8" `339 
F B "bit_test" 2 557 "int8(int32 var,int8 bit)" `337  "#use delay() Prototypes:"
F N "delay_cycles" 2 560 ""
V L "count" 2 560 "int8" `341 
F B "delay_cycles" 2 560 "void(int8 count)" `340 
F N "delay_ms" 2 561 ""
V L "time" 2 561 "int16" `343 
F B "delay_ms" 2 561 "void(int16 time)" `342 
F N "delay_us" 2 562 ""
V L "time" 2 562 "int16" `345 
F B "delay_us" 2 562 "void(int16 time)" `344  "#use rs232() Prototypes:"
F N "putchar" 2 565 ""
V L "cdata" 2 565 "int8" `347 
F B "putchar" 2 565 "void(int8 cdata)" `346 
F N "putchar" 2 566 ""
V L "cdata" 2 566 "int8" `349 
V L "stream" 2 566 "int8" `350 
F B "putchar" 2 566 "void(int8 cdata,int8 stream)" `348 
F N "puts" 2 567 ""
V L "string" 2 567 "*int8" `352 
F B "puts" 2 567 "void(*int8 string)" `351 
F N "puts" 2 568 ""
V L "string" 2 568 "*int8" `354 
V L "stream" 2 568 "int8" `355 
F B "puts" 2 568 "void(*int8 string,int8 stream)" `353 
F N "getch" 2 569 ""
F B "getch" 2 569 "int8()" `356 
F N "getch" 2 570 ""
V L "stream" 2 570 "int8" `358 
F B "getch" 2 570 "int8(int8 stream)" `357 
F N "gets" 2 571 ""
V L "string" 2 571 "*int8" `360 
F B "gets" 2 571 "void(*int8 string)" `359 
F N "gets" 2 572 ""
V L "string" 2 572 "*int8" `362 
V L "stream" 2 572 "int8" `363 
F B "gets" 2 572 "void(*int8 string,int8 stream)" `361 
F N "kbhit" 2 573 ""
F B "kbhit" 2 573 "int8()" `364 
F N "kbhit" 2 574 ""
V L "stream" 2 574 "int8" `366 
F B "kbhit" 2 574 "int8(int8 stream)" `365 
F N "printf" 2 575 ""
V L "string" 2 575 "*int8" `368 
F B "printf" 2 575 "void(*int8 string,*int8 _VA_LIST)" `367 
F N "fprintf" 2 576 ""
V L "stream" 2 576 "int8" `371 
V L "string" 2 576 "*int8" `372 
F B "fprintf" 2 576 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `370 
F N "putc_send" 2 577 ""
F B "putc_send" 2 577 "void()" `374 
F N "fputc_send" 2 578 ""
V L "stream" 2 578 "int8" `376 
F B "fputc_send" 2 578 "void(int8 stream)" `375 
F N "rcv_buffer_full" 2 579 ""
F B "rcv_buffer_full" 2 579 "int8()" `377 
F N "rcv_buffer_full" 2 580 ""
V L "stream" 2 580 "int8" `379 
F B "rcv_buffer_full" 2 580 "int8(int8 stream)" `378 
F N "rcv_buffer_bytes" 2 581 ""
F B "rcv_buffer_bytes" 2 581 "int16()" `380 
F N "rcv_buffer_bytes" 2 582 ""
V L "stream" 2 582 "int8" `382 
F B "rcv_buffer_bytes" 2 582 "int16(int8 stream)" `381 
F N "tx_buffer_full" 2 583 ""
F B "tx_buffer_full" 2 583 "int8()" `383 
F N "tx_buffer_full" 2 584 ""
V L "stream" 2 584 "int8" `385 
F B "tx_buffer_full" 2 584 "int8(int8 stream)" `384 
F N "tx_buffer_bytes" 2 585 ""
F B "tx_buffer_bytes" 2 585 "int16()" `386 
F N "tx_buffer_bytes" 2 586 ""
V L "stream" 2 586 "int8" `388 
F B "tx_buffer_bytes" 2 586 "int16(int8 stream)" `387  "#use i2c() Prototypes:"
F N "i2c_read" 2 589 ""
F B "i2c_read" 2 589 "int8()" `389 
F N "i2c_read" 2 590 ""
V L "stream" 2 590 "int8" `391 
F B "i2c_read" 2 590 "int8(int8 stream)" `390 
F N "i2c_read" 2 591 ""
V L "stream" 2 591 "int8" `393 
V L "ack" 2 591 "int8" `394 
F B "i2c_read" 2 591 "int8(int8 stream,int8 ack)" `392 
F N "i2c_write" 2 592 ""
V L "data" 2 592 "int8" `396 
F B "i2c_write" 2 592 "int8(int8 data)" `395 
F N "i2c_write" 2 593 ""
V L "stream" 2 593 "int8" `398 
V L "data" 2 593 "int8" `399 
F B "i2c_write" 2 593 "int8(int8 stream,int8 data)" `397 
F N "i2c_start" 2 594 ""
F B "i2c_start" 2 594 "void()" `400 
F N "i2c_start" 2 595 ""
V L "stream" 2 595 "int8" `402 
F B "i2c_start" 2 595 "void(int8 stream)" `401 
F N "i2c_start" 2 596 ""
V L "stream" 2 596 "int8" `404 
V L "restart" 2 596 "int8" `405 
F B "i2c_start" 2 596 "void(int8 stream,int8 restart)" `403 
F N "i2c_stop" 2 597 ""
F B "i2c_stop" 2 597 "void()" `406 
F N "i2c_stop" 2 598 ""
V L "stream" 2 598 "int8" `408 
F B "i2c_stop" 2 598 "void(int8 stream)" `407 
F N "i2c_isr_state" 2 599 ""
F B "i2c_isr_state" 2 599 "int8()" `409 
F N "i2c_slaveaddr" 2 600 ""
V L "addr" 2 600 "int8" `411 
F B "i2c_slaveaddr" 2 600 "void(int8 addr)" `410 
F N "i2c_slaveaddr" 2 601 ""
V L "stream" 2 601 "int8" `413 
V L "addr" 2 601 "int8" `414 
F B "i2c_slaveaddr" 2 601 "void(int8 stream,int8 addr)" `412 
F N "i2c_poll" 2 602 ""
F B "i2c_poll" 2 602 "int8()" `415 
F N "i2c_poll" 2 603 ""
V L "stream" 2 603 "int8" `417 
F B "i2c_poll" 2 603 "int8(int8 stream)" `416 
F N "i2c_init" 2 604 ""
V L "baud" 2 604 "int32" `419 
F B "i2c_init" 2 604 "void(int32 baud)" `418 
F N "i2c_init" 2 605 ""
V L "stream" 2 605 "int8" `421 
V L "baud" 2 605 "int32" `422 
F B "i2c_init" 2 605 "void(int8 stream,int32 baud)" `420  "#use spi() Prototypes:"
F N "spi_xfer" 2 608 ""
F B "spi_xfer" 2 608 "int8()" `423 
F N "spi_xfer" 2 609 ""
f G "spi_xfer" 2 609 "int16(int8 data)" `424 
F N "spi_xfer" 2 610 ""
f G "spi_xfer" 2 610 "int32(int8 data)" `424 
F N "spi_xfer" 2 611 ""
V L "data" 2 611 "int8" `425 
F B "spi_xfer" 2 611 "int8(int8 data)" `424 
F N "spi_xfer" 2 612 ""
V L "data" 2 612 "int16" `427 
F B "spi_xfer" 2 612 "int16(int16 data)" `426 
F N "spi_xfer" 2 613 ""
V L "data" 2 613 "int32" `429 
F B "spi_xfer" 2 613 "int32(int32 data)" `428 
F N "spi_xfer" 2 614 ""
V L "stream" 2 614 "int8" `431 
V L "data" 2 614 "int8" `432 
F B "spi_xfer" 2 614 "int8(int8 stream,int8 data)" `430 
F N "spi_xfer" 2 615 ""
V L "stream" 2 615 "int8" `434 
V L "data" 2 615 "int16" `435 
F B "spi_xfer" 2 615 "int16(int8 stream,int16 data)" `433 
F N "spi_xfer" 2 616 ""
V L "stream" 2 616 "int8" `437 
V L "data" 2 616 "int32" `438 
F B "spi_xfer" 2 616 "int32(int8 stream,int32 data)" `436 
F N "spi_xfer" 2 617 ""
V L "stream" 2 617 "int8" `440 
V L "data" 2 617 "int8" `441 
V L "bits" 2 617 "int8" `442 
F B "spi_xfer" 2 617 "int8(int8 stream,int8 data,int8 bits)" `439 
F N "spi_xfer" 2 618 ""
V L "stream" 2 618 "int8" `444 
V L "data" 2 618 "int16" `445 
V L "bits" 2 618 "int8" `446 
F B "spi_xfer" 2 618 "int16(int8 stream,int16 data,int8 bits)" `443 
F N "spi_xfer" 2 619 ""
V L "stream" 2 619 "int8" `448 
V L "data" 2 619 "int32" `449 
V L "bits" 2 619 "int8" `450 
F B "spi_xfer" 2 619 "int32(int8 stream,int32 data,int8 bits)" `447 
F N "spi_init" 2 620 ""
V L "baud" 2 620 "int32" `452 
F B "spi_init" 2 620 "void(int32 baud)" `451 
F N "spi_init" 2 621 ""
V L "stream" 2 621 "int8" `454 
V L "baud" 2 621 "int32" `455 
F B "spi_init" 2 621 "void(int8 stream,int32 baud)" `453 
F N "spi_speed" 2 622 ""
V L "baud" 2 622 "int32" `457 
F B "spi_speed" 2 622 "void(int32 baud)" `456 
F N "spi_speed" 2 623 ""
V L "stream" 2 623 "int8" `459 
V L "baud" 2 623 "int32" `460 
F B "spi_speed" 2 623 "void(int8 stream,int32 baud)" `458 
F N "spi_speed" 2 624 ""
V L "stream" 2 624 "int8" `462 
V L "baud" 2 624 "int32" `463 
V L "clock" 2 624 "int32" `464 
F B "spi_speed" 2 624 "void(int8 stream,int32 baud,int32 clock)" `461 
F N "spi_prewrite" 2 625 ""
V L "data" 2 625 "int8" `466 
F B "spi_prewrite" 2 625 "void(int8 data)" `465 
F N "spi_prewrite" 2 626 ""
V L "data" 2 626 "int16" `468 
F B "spi_prewrite" 2 626 "void(int16 data)" `467 
F N "spi_prewrite" 2 627 ""
V L "data" 2 627 "int32" `470 
F B "spi_prewrite" 2 627 "void(int32 data)" `469 
F N "spi_prewrite" 2 628 ""
V L "??65535" 2 628 "int8" `472 
V L "data" 2 628 "int8" `473 
F B "spi_prewrite" 2 628 "void(int8 ,int8 data)" `471 
F N "spi_prewrite" 2 629 ""
V L "??65535" 2 629 "int8" `475 
V L "data" 2 629 "int16" `476 
F B "spi_prewrite" 2 629 "void(int8 ,int16 data)" `474 
F N "spi_prewrite" 2 630 ""
V L "??65535" 2 630 "int8" `478 
V L "data" 2 630 "int32" `479 
F B "spi_prewrite" 2 630 "void(int8 ,int32 data)" `477 
F N "spi_xfer_in" 2 631 ""
F B "spi_xfer_in" 2 631 "int8()" `480 
F N "spi_xfer_in" 2 632 ""
f G "spi_xfer_in" 2 632 "int16(int8 bits)" `481 
F N "spi_xfer_in" 2 633 ""
f G "spi_xfer_in" 2 633 "int32(int8 bits)" `481 
F N "spi_xfer_in" 2 634 ""
V L "bits" 2 634 "int8" `482 
F B "spi_xfer_in" 2 634 "int8(int8 bits)" `481 
F N "spi_xfer_in" 2 635 ""
V L "bits" 2 635 "int8" `484 
f G "spi_xfer_in" 2 635 "int16(int8 bits,int8 bits)" `483 
F N "spi_xfer_in" 2 636 ""
V L "bits" 2 636 "int8" `484 
f G "spi_xfer_in" 2 636 "int32(int8 bits,int8 bits)" `483 
F N "spi_xfer_in" 2 637 ""
V L "stream" 2 637 "int8" `484 
V L "bits" 2 637 "int8" `485 
F B "spi_xfer_in" 2 637 "int8(int8 stream,int8 bits)" `483 
F N "spi_xfer_in" 2 638 ""
V L "stream" 2 638 "int8" `484 
V L "bits" 2 638 "int8" `488 
f G "spi_xfer_in" 2 638 "int16(int8 stream,int8 bits,int8 task)" `486 
F N "spi_xfer_in" 2 639 ""
V L "stream" 2 639 "int8" `484 
V L "bits" 2 639 "int8" `488 
f G "spi_xfer_in" 2 639 "int32(int8 stream,int8 bits,int8 task)" `486  "#use rtos() Prototypes:"
F N "rtos_run" 2 642 ""
F B "rtos_run" 2 642 "void(int8 stream,int8 bits,int8 task)" `486 
F N "rtos_yield" 2 643 ""
F B "rtos_yield" 2 643 "void(int8 bits,int8 task)" `487 
F N "rtos_enable" 2 644 ""
V L "task" 2 644 "int8" `489 
F B "rtos_enable" 2 644 "void(int8 task)" `488 
F N "rtos_disable" 2 645 ""
V L "task" 2 645 "int8" `491 
F B "rtos_disable" 2 645 "void(int8 task)" `490 
F N "rtos_terminate" 2 646 ""
F B "rtos_terminate" 2 646 "void()" `492 
F N "rtos_await" 2 647 ""
V L "flag" 2 647 "int8" `494 
F B "rtos_await" 2 647 "void(int8 flag)" `493 
F N "rtos_wait" 2 648 ""
V L "sem" 2 648 "int8" `496 
F B "rtos_wait" 2 648 "void(int8 sem)" `495 
F N "rtos_signal" 2 649 ""
V L "sem" 2 649 "int8" `498 
F B "rtos_signal" 2 649 "void(int8 sem)" `497 
F N "rtos_msg_send" 2 650 ""
V L "task" 2 650 "int8" `500 
V L "msg" 2 650 "int8" `501 
F B "rtos_msg_send" 2 650 "void(int8 task,int8 msg)" `499 
F N "rtos_msg_read" 2 651 ""
F B "rtos_msg_read" 2 651 "int8()" `502 
F N "rtos_msg_poll" 2 652 ""
F B "rtos_msg_poll" 2 652 "int8()" `503 
F N "rtos_overrun" 2 653 ""
V L "task" 2 653 "int8" `505 
F B "rtos_overrun" 2 653 "int8(int8 task)" `504 
F N "rtos_stats" 2 654 ""
V L "task" 2 654 "int8" `507 
V L "stat" 2 654 "*int8" `508 
F B "rtos_stats" 2 654 "void(int8 task,*int8 stat)" `506  "#use timer() Prototypes:"
F N "get_ticks" 2 657 ""
F B "get_ticks" 2 657 "int8()" `509 
F N "get_ticks" 2 658 ""
f G "get_ticks" 2 658 "int16(int8 stream)" `510 
F N "get_ticks" 2 659 ""
f G "get_ticks" 2 659 "int32(int8 stream)" `510 
F N "get_ticks" 2 660 ""
V L "stream" 2 660 "int8" `511 
F B "get_ticks" 2 660 "int8(int8 stream)" `510 
F N "get_ticks" 2 661 ""
V L "stream" 2 661 "int8" `513 
f G "get_ticks" 2 661 "int16(int8 stream)" `512 
F N "get_ticks" 2 662 ""
V L "stream" 2 662 "int8" `513 
f G "get_ticks" 2 662 "int32(int8 stream)" `512 
F N "set_ticks" 2 663 ""
V L "value" 2 663 "int8" `513 
F B "set_ticks" 2 663 "void(int8 value)" `512 
F N "set_ticks" 2 664 ""
V L "value" 2 664 "int16" `515 
F B "set_ticks" 2 664 "void(int16 value)" `514 
F N "set_ticks" 2 665 ""
V L "value" 2 665 "int32" `517 
F B "set_ticks" 2 665 "void(int32 value)" `516 
F N "set_ticks" 2 666 ""
V L "stream" 2 666 "int8" `519 
V L "value" 2 666 "int8" `520 
F B "set_ticks" 2 666 "void(int8 stream,int8 value)" `518 
F N "set_ticks" 2 667 ""
V L "stream" 2 667 "int8" `522 
V L "value" 2 667 "int16" `523 
F B "set_ticks" 2 667 "void(int8 stream,int16 value)" `521 
F N "set_ticks" 2 668 ""
V L "stream" 2 668 "int8" `525 
V L "value" 2 668 "int32" `526 
F B "set_ticks" 2 668 "void(int8 stream,int32 value)" `524  "#use pwm() Prototypes:"
F N "pwm_on" 2 671 ""
F B "pwm_on" 2 671 "void()" `527 
F N "pwm_on" 2 672 ""
V L "stream" 2 672 "int8" `529 
F B "pwm_on" 2 672 "void(int8 stream)" `528 
F N "pwm_off" 2 673 ""
F B "pwm_off" 2 673 "void()" `530 
F N "pwm_off" 2 674 ""
V L "stream" 2 674 "int8" `532 
F B "pwm_off" 2 674 "void(int8 stream)" `531 
F N "pwm_set_duty" 2 675 ""
V L "duty" 2 675 "int16" `534 
F B "pwm_set_duty" 2 675 "void(int16 duty)" `533 
F N "pwm_set_duty" 2 676 ""
V L "stream" 2 676 "int8" `536 
V L "duty" 2 676 "int16" `537 
F B "pwm_set_duty" 2 676 "void(int8 stream,int16 duty)" `535 
F N "pwm_set_duty_percent" 2 677 ""
V L "percent" 2 677 "int16" `539 
F B "pwm_set_duty_percent" 2 677 "void(int16 percent)" `538 
F N "pwm_set_duty_percent" 2 678 ""
V L "stream" 2 678 "int8" `541 
V L "percent" 2 678 "int16" `542 
F B "pwm_set_duty_percent" 2 678 "void(int8 stream,int16 percent)" `540 
F N "pwm_set_frequency" 2 679 ""
V L "frequency" 2 679 "int32" `544 
F B "pwm_set_frequency" 2 679 "void(int32 frequency)" `543 
F N "pwm_set_frequency" 2 680 ""
V L "stream" 2 680 "int8" `546 
V L "frequency" 2 680 "int32" `547 
F B "pwm_set_frequency" 2 680 "void(int8 stream,int32 frequency)" `545  "#use capture() Prototypes:"
F N "get_capture_time" 2 683 ""
F B "get_capture_time" 2 683 "int16()" `548 
F N "get_capture_time" 2 684 ""
V L "stream" 2 684 "int8" `550 
F B "get_capture_time" 2 684 "int16(int8 stream)" `549 
F N "get_capture_event" 2 685 ""
F B "get_capture_event" 2 685 "int8()" `551 
F N "get_capture_event" 2 686 ""
V L "stream" 2 686 "int8" `553 
F B "get_capture_event" 2 686 "int8(int8 stream)" `552  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
F N "goto_address" 2 699 ""
V L "address" 2 699 "int16" `555 
F B "goto_address" 2 699 "void(int16 address)" `554 
F N "label_address" 2 700 ""
V L "label" 2 700 "int16" `557 
F B "label_address" 2 700 "int16(int16 label)" `556  "Program Memory Prototypes:"
F N "read_program_memory" 2 703 ""
V L "address" 2 703 "int16" `559 
V L "dataptr" 2 703 "*int8" `560 
V L "count" 2 703 "int16" `561 
F B "read_program_memory" 2 703 "void(int16 address,*int8 dataptr,int16 count)" `558 
F N "read_program_eeprom" 2 704 ""
V L "address" 2 704 "int16" `563 
F B "read_program_eeprom" 2 704 "int16(int16 address)" `562 
F N "erase_program_eeprom" 2 705 ""
V L "address" 2 705 "int16" `565 
F B "erase_program_eeprom" 2 705 "void(int16 address)" `564 
F N "write_program_memory" 2 706 ""
V L "address" 2 706 "int16" `567 
V L "dataptr" 2 706 "*int8" `568 
V L "count" 2 706 "int16" `569 
F B "write_program_memory" 2 706 "void(int16 address,*int8 dataptr,int16 count)" `566 
F N "write_program_eeprom" 2 707 ""
V L "address" 2 707 "int16" `571 
V L "data" 2 707 "int16" `572 
F B "write_program_eeprom" 2 707 "void(int16 address,int16 data)" `570  "EEPROM Prototypes:"
T G "__EEADDRESS__" 2 712 "int16" `573 
F N "read_eeprom" 2 717 ""
V L "address" 2 717 "__EEADDRESS__" `575 
F B "read_eeprom" 2 717 "int8(__EEADDRESS__ address)" `574 
F N "write_eeprom" 2 718 ""
V L "address" 2 718 "__EEADDRESS__" `577 
V L "value" 2 718 "int8" `578 
F B "write_eeprom" 2 718 "void(__EEADDRESS__ address,int8 value)" `576  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
F N "enable_interrupts" 2 725 ""
V L "interrupt" 2 725 "int32" `580 
F B "enable_interrupts" 2 725 "void(int32 interrupt)" `579 
F N "disable_interrupts" 2 726 ""
V L "interrupt" 2 726 "int32" `582 
F B "disable_interrupts" 2 726 "void(int32 interrupt)" `581 
F N "clear_interrupt" 2 727 ""
V L "interrupt" 2 727 "int32" `584 
F B "clear_interrupt" 2 727 "void(int32 interrupt)" `583 
F N "interrupt_active" 2 728 ""
V L "interrupt" 2 728 "int32" `586 
F B "interrupt_active" 2 728 "int8(int32 interrupt)" `585 
F N "interrupt_enabled" 2 729 ""
V L "interrupt" 2 729 "int32" `588 
F B "interrupt_enabled" 2 729 "int8(int32 interrupt)" `587 
F N "ext_int_edge" 2 730 ""
V L "source" 2 730 "int8" `590 
V L "edge" 2 730 "int8" `591 
F B "ext_int_edge" 2 730 "void(int8 source,int8 edge)" `589 
F N "jump_to_irs" 2 731 ""
V L "address" 2 731 "int16" `593 
F B "jump_to_irs" 2 731 "void(int16 address)" `592  "Constants used in EXT_INT_EDGE() are:"
D G "L_TO_H" 2 733 "0x40"
D G "H_TO_L" 2 734 "0"
D G "GLOBAL" 2 736 "0x0BC0"
D G "PERIPH" 2 737 "0x0B40"
D G "INT_RTCC" 2 738 "0x000B20"
D G "INT_RB" 2 739 "0x01FF0B08"
D G "INT_EXT_L2H" 2 740 "0x50000B10"
D G "INT_EXT_H2L" 2 741 "0x60000B10"
D G "INT_EXT" 2 742 "0x000B10"
D G "INT_AD" 2 743 "0x008C40"
D G "INT_TBE" 2 744 "0x008C10"
D G "INT_RDA" 2 745 "0x008C20"
D G "INT_TIMER1" 2 746 "0x008C01"
D G "INT_TIMER2" 2 747 "0x008C02"
D G "INT_CCP1" 2 748 "0x008C04"
D G "INT_CCP2" 2 749 "0x008D01"
D G "INT_SSP" 2 750 "0x008C08"
D G "INT_BUSCOL" 2 751 "0x008D08"
D G "INT_EEPROM" 2 752 "0x008D10"
D G "INT_TIMER0" 2 753 "0x000B20"
D G "INT_OSC_FAIL" 2 754 "0x008D80"
D G "INT_COMP" 2 755 "0x008D20"
D G "INT_COMP2" 2 756 "0x008D40"
D G "INT_ULPWU" 2 757 "0x008D04"
D G "INT_RB0" 2 758 "0x1010B08"
D G "INT_RB1" 2 759 "0x1020B08"
D G "INT_RB2" 2 760 "0x1040B08"
D G "INT_RB3" 2 761 "0x1080B08"
D G "INT_RB4" 2 762 "0x1100B08"
D G "INT_RB5" 2 763 "0x1200B08"
D G "INT_RB6" 2 764 "0x1400B08"
D G "INT_RB7" 2 765 "0x1800B08"
D G "LCD_ENABLE_PIN" 0 4 "PIN_D2"
D G "LCD_RS_PIN" 0 5 "PIN_D0"
D G "LCD_RW_PIN" 0 6 "PIN_D1"
D G "LCD_DATA4" 0 7 "PIN_D4"
D G "LCD_DATA5" 0 8 "PIN_D5"
D G "LCD_DATA6" 0 9 "PIN_D6"
D G "LCD_DATA7" 0 10 "PIN_D7"
D G "__LCD_C__" 3 76 ""
C L "jump_to_irs" 3 2 2 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 1 "FUNCTION"
C L "jump_to_irs" 3 2 2 "FUNCTION"
T G "LCD_PIN_MAP" 3 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `604  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 3 112 "(x) output_bit(LCD_ENABLE_PIN, x)"
D G "lcd_enable_tris" 3 113 "()  output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 3 120 "(x) output_bit(LCD_RS_PIN, x)"
D G "lcd_rs_tris" 3 121 "()  output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 3 128 "(x) output_bit(LCD_RW_PIN, x)"
D G "lcd_rw_tris" 3 129 "()  output_drive(LCD_RW_PIN)"
D G "LCD_TYPE" 3 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 3 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 3 187 "20"
F N "lcd_read_nibble" 3 190 ""
f G "lcd_read_nibble" 3 190 "int8()" `605 
F N "lcd_read_byte" 3 192 ""
F G "lcd_read_byte" 3 193 "int8()" `606 
V L "low" 3 194 "int8" `607 
V L "high" 3 194 "int8" `608 
F N "lcd_read_nibble" 3 239 ""
F G "lcd_read_nibble" 3 240 "int8()" `605 
V L "n" 3 242 "int8" `609 
C L "lcd_read_nibble" 3 2 1 "FUNCTION"
F N "lcd_send_nibble" 3 256 ""
V L "n" 3 256 "int8" `611 
F G "lcd_send_nibble" 3 257 "void(int8 n)" `610 
C L "lcd_send_nibble" 3 2 1 "FUNCTION"
F N "lcd_send_byte" 3 274 ""
V L "address" 3 274 "int8" `613 
V L "n" 3 274 "int8" `614 
F G "lcd_send_byte" 3 275 "void(int8 address,int8 n)" `612 
F N "lcd_init" 3 299 ""
F G "lcd_init" 3 300 "void()" `615 
V L "i" 3 301 "int8" `616 
V L "LCD_INIT_STRING" 3 302 "int8[4]" `617 
C L "lcd_init" 3 2 2 "FUNCTION"
F N "lcd_gotoxy" 3 345 ""
V L "x" 3 345 "int8" `619 
V L "y" 3 345 "int8" `620 
F G "lcd_gotoxy" 3 346 "void(int8 x,int8 y)" `618 
V L "address" 3 347 "int8" `621 
F N "lcd_putc" 3 363 ""
V L "c" 3 363 "int8" `623 
F G "lcd_putc" 3 364 "void(int8 c)" `622 
F N "lcd_getc" 3 406 ""
V L "x" 3 406 "int8" `625 
V L "y" 3 406 "int8" `626 
F G "lcd_getc" 3 407 "int8(int8 x,int8 y)" `624 
V L "value" 3 408 "int8" `627 
C L "lcd_getc" 3 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 3 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 3 424 ""
V L "which" 3 424 "int8" `629 
V L "ptr" 3 424 "*int8" `630 
F G "lcd_set_cgram_char" 3 425 "void(int8 which,*int8 ptr)" `628 
V L "i" 3 426 "int8" `631 
C L "lcd_set_cgram_char" 3 2 1 "FUNCTION"
F N "lcd_cursor_on" 3 443 ""
V L "on" 3 443 "int8" `633 
F G "lcd_cursor_on" 3 444 "void(int8 on)" `632 
C L "lcd_cursor_on" 3 2 1 "FUNCTION"
C L "lcd_cursor_on" 3 2 1 "FUNCTION"
D G "led_a" 0 13 "PIN_A2"
D G "led_b" 0 14 "PIN_A3"
V G "adc0" 0 16 "sint32" `634 
V G "adc1" 0 16 "sint32" `635 
V G "lm35_a" 0 16 "sint32" `636 
V G "lm35_b" 0 16 "sint32" `637 
F N "read_lm35_a" 0 18 ""
F G "read_lm35_a" 0 19 "void()" `638 
V L "i" 0 22 "int8" `639 
F N "read_lm35_b" 0 32 ""
F G "read_lm35_b" 0 33 "void()" `647 
V L "i" 0 36 "int8" `648 
F N "MAIN" 0 46 ""
F G "MAIN" 0 47 "void()" `649 
C L "MAIN" 0 48 1 "FUNCTION"
C L "MAIN" 0 48 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
