

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat Apr 29 09:00:13 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F877A Definitions
    54                           ; 
    55                           ; SFR Addresses
    56     0000                     	;# 
    57     0001                     	;# 
    58     0002                     	;# 
    59     0003                     	;# 
    60     0004                     	;# 
    61     0005                     	;# 
    62     0006                     	;# 
    63     0007                     	;# 
    64     0008                     	;# 
    65     0009                     	;# 
    66     000A                     	;# 
    67     000B                     	;# 
    68     000C                     	;# 
    69     000D                     	;# 
    70     000E                     	;# 
    71     000E                     	;# 
    72     000F                     	;# 
    73     0010                     	;# 
    74     0011                     	;# 
    75     0012                     	;# 
    76     0013                     	;# 
    77     0014                     	;# 
    78     0015                     	;# 
    79     0015                     	;# 
    80     0016                     	;# 
    81     0017                     	;# 
    82     0018                     	;# 
    83     0019                     	;# 
    84     001A                     	;# 
    85     001B                     	;# 
    86     001B                     	;# 
    87     001C                     	;# 
    88     001D                     	;# 
    89     001E                     	;# 
    90     001F                     	;# 
    91     0081                     	;# 
    92     0085                     	;# 
    93     0086                     	;# 
    94     0087                     	;# 
    95     0088                     	;# 
    96     0089                     	;# 
    97     008C                     	;# 
    98     008D                     	;# 
    99     008E                     	;# 
   100     0091                     	;# 
   101     0092                     	;# 
   102     0093                     	;# 
   103     0094                     	;# 
   104     0098                     	;# 
   105     0099                     	;# 
   106     009C                     	;# 
   107     009D                     	;# 
   108     009E                     	;# 
   109     009F                     	;# 
   110     010C                     	;# 
   111     010D                     	;# 
   112     010E                     	;# 
   113     010F                     	;# 
   114     018C                     	;# 
   115     018D                     	;# 
   116     0000                     	;# 
   117     0001                     	;# 
   118     0002                     	;# 
   119     0003                     	;# 
   120     0004                     	;# 
   121     0005                     	;# 
   122     0006                     	;# 
   123     0007                     	;# 
   124     0008                     	;# 
   125     0009                     	;# 
   126     000A                     	;# 
   127     000B                     	;# 
   128     000C                     	;# 
   129     000D                     	;# 
   130     000E                     	;# 
   131     000E                     	;# 
   132     000F                     	;# 
   133     0010                     	;# 
   134     0011                     	;# 
   135     0012                     	;# 
   136     0013                     	;# 
   137     0014                     	;# 
   138     0015                     	;# 
   139     0015                     	;# 
   140     0016                     	;# 
   141     0017                     	;# 
   142     0018                     	;# 
   143     0019                     	;# 
   144     001A                     	;# 
   145     001B                     	;# 
   146     001B                     	;# 
   147     001C                     	;# 
   148     001D                     	;# 
   149     001E                     	;# 
   150     001F                     	;# 
   151     0081                     	;# 
   152     0085                     	;# 
   153     0086                     	;# 
   154     0087                     	;# 
   155     0088                     	;# 
   156     0089                     	;# 
   157     008C                     	;# 
   158     008D                     	;# 
   159     008E                     	;# 
   160     0091                     	;# 
   161     0092                     	;# 
   162     0093                     	;# 
   163     0094                     	;# 
   164     0098                     	;# 
   165     0099                     	;# 
   166     009C                     	;# 
   167     009D                     	;# 
   168     009E                     	;# 
   169     009F                     	;# 
   170     010C                     	;# 
   171     010D                     	;# 
   172     010E                     	;# 
   173     010F                     	;# 
   174     018C                     	;# 
   175     018D                     	;# 
   176     000B                     _INTCONbits	set	11
   177     0001                     _TMR0	set	1
   178     0006                     _PORTBbits	set	6
   179     0081                     _OPTION_REGbits	set	129
   180     0086                     _TRISBbits	set	134
   181                           
   182                           	psect	cinit
   183     0011                     start_initialization:	
   184                           ; #config settings
   185                           
   186     0011                     __initialization:
   187                           
   188                           ; Clear objects allocated to COMMON
   189     0011  01F7               	clrf	__pbssCOMMON& (0+127)
   190     0012  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   191     0013  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   192     0014  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   193                           
   194                           ; Clear objects allocated to BANK0
   195     0015  1383               	bcf	3,7	;select IRP bank0
   196     0016  3020               	movlw	low __pbssBANK0
   197     0017  0084               	movwf	4
   198     0018  3040               	movlw	low (__pbssBANK0+32)
   199     0019  120A  118A  21C9  120A  118A  	fcall	clear_ram0
   200     001E                     end_of_initialization:	
   201                           ;End of C runtime variable initialization code
   202                           
   203     001E                     __end_of__initialization:
   204     001E  0183               	clrf	3
   205     001F  120A  118A  296A   	ljmp	_main	;jump to C main() function
   206                           
   207                           	psect	bssCOMMON
   208     0077                     __pbssCOMMON:
   209     0077                     _Count_timer1:
   210     0077                     	ds	4
   211                           
   212                           	psect	bssBANK0
   213     0020                     __pbssBANK0:
   214     0020                     _analog_value:
   215     0020                     	ds	4
   216     0024                     _step2:
   217     0024                     	ds	4
   218     0028                     _step1:
   219     0028                     	ds	4
   220     002C                     _Count_timer2:
   221     002C                     	ds	4
   222     0030                     _Count_BOT2:
   223     0030                     	ds	4
   224     0034                     _Count_TOP2:
   225     0034                     	ds	4
   226     0038                     _Count_BOT1:
   227     0038                     	ds	4
   228     003C                     _Count_TOP1:
   229     003C                     	ds	4
   230                           
   231                           	psect	clrtext
   232     01C9                     clear_ram0:	
   233                           ;	Called with FSR containing the base address, and
   234                           ;	W with the last address+1
   235                           
   236     01C9  0064               	clrwdt	;clear the watchdog before getting into this loop
   237     01CA                     clrloop0:
   238     01CA  0180               	clrf	0	;clear RAM location pointed to by FSR
   239     01CB  0A84               	incf	4,f	;increment pointer
   240     01CC  0604               	xorwf	4,w	;XOR with final address
   241     01CD  1903               	btfsc	3,2	;have we reached the end yet?
   242     01CE  3400               	retlw	0	;all done for this memory range, return
   243     01CF  0604               	xorwf	4,w	;XOR again to restore value
   244     01D0  29CA               	goto	clrloop0	;do the next byte
   245                           
   246                           	psect	cstackCOMMON
   247     0070                     __pcstackCOMMON:
   248     0070                     ?_A4988_init:
   249     0070                     ?_timer0_init:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_main:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ?_timer_isr:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     ??_timer_isr:	
   259                           ; 1 bytes @ 0x0
   260                           
   261                           
   262                           ; 1 bytes @ 0x0
   263     0070                     	ds	3
   264     0073                     ??_A4988_init:
   265     0073                     ??_timer0_init:	
   266                           ; 1 bytes @ 0x3
   267                           
   268     0073                     ?___awdiv:	
   269                           ; 1 bytes @ 0x3
   270                           
   271     0073                     ___awdiv@divisor:	
   272                           ; 2 bytes @ 0x3
   273                           
   274                           
   275                           ; 2 bytes @ 0x3
   276     0073                     	ds	2
   277     0075                     ___awdiv@dividend:
   278                           
   279                           ; 2 bytes @ 0x5
   280     0075                     	ds	2
   281                           
   282                           	psect	cstackBANK0
   283     0040                     __pcstackBANK0:
   284     0040                     ??___awdiv:
   285                           
   286                           ; 1 bytes @ 0x0
   287     0040                     	ds	1
   288     0041                     ___awdiv@counter:
   289                           
   290                           ; 1 bytes @ 0x1
   291     0041                     	ds	1
   292     0042                     ___awdiv@sign:
   293                           
   294                           ; 1 bytes @ 0x2
   295     0042                     	ds	1
   296     0043                     ___awdiv@quotient:
   297                           
   298                           ; 2 bytes @ 0x3
   299     0043                     	ds	2
   300     0045                     ?_Speed_M1:
   301     0045                     Speed_M1@x:	
   302                           ; 1 bytes @ 0x5
   303                           
   304                           
   305                           ; 2 bytes @ 0x5
   306     0045                     	ds	2
   307     0047                     ??_Speed_M1:
   308                           
   309                           ; 1 bytes @ 0x7
   310     0047                     	ds	2
   311     0049                     ??_main:
   312                           
   313                           ; 1 bytes @ 0x9
   314     0049                     	ds	2
   315                           
   316                           	psect	maintext
   317     016A                     __pmaintext:	
   318 ;;
   319 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   320 ;;
   321 ;; *************** function _main *****************
   322 ;; Defined at:
   323 ;;		line 87 in file "code.c"
   324 ;; Parameters:    Size  Location     Type
   325 ;;		None
   326 ;; Auto vars:     Size  Location     Type
   327 ;;  x               2    0        unsigned int 
   328 ;; Return value:  Size  Location     Type
   329 ;;                  1    wreg      void 
   330 ;; Registers used:
   331 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   332 ;; Tracked objects:
   333 ;;		On entry : B00/0
   334 ;;		On exit  : 0/0
   335 ;;		Unchanged: 0/0
   336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   337 ;;      Params:         0       0       0       0       0
   338 ;;      Locals:         0       0       0       0       0
   339 ;;      Temps:          0       2       0       0       0
   340 ;;      Totals:         0       2       0       0       0
   341 ;;Total ram usage:        2 bytes
   342 ;; Hardware stack levels required when called: 3
   343 ;; This function calls:
   344 ;;		_A4988_init
   345 ;;		_Speed_M1
   346 ;;		_timer0_init
   347 ;; This function is called by:
   348 ;;		Startup code after reset
   349 ;; This function uses a non-reentrant model
   350 ;;
   351                           
   352     016A                     _main:	
   353                           ;psect for function _main
   354                           
   355     016A                     l916:	
   356                           ;incstack = 0
   357                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   358                           
   359                           
   360                           ;code.c: 89:     uint16_t x;;code.c: 90:     A4988_init();
   361     016A  120A  118A  21BA  120A  118A  	fcall	_A4988_init
   362     016F                     l918:
   363                           
   364                           ;code.c: 91:     timer0_init();
   365     016F  120A  118A  21AB  120A  118A  	fcall	_timer0_init
   366     0174                     l920:
   367                           
   368                           ;code.c: 92:     TRISBbits.TRISB0 = 1;
   369     0174  1683               	bsf	3,5	;RP0=1, select bank1
   370     0175  1303               	bcf	3,6	;RP1=0, select bank1
   371     0176  1406               	bsf	6,0	;volatile
   372     0177                     l922:
   373                           
   374                           ;code.c: 93:     PORTBbits.RB5 = 1;
   375     0177  1283               	bcf	3,5	;RP0=0, select bank0
   376     0178  1303               	bcf	3,6	;RP1=0, select bank0
   377     0179  1686               	bsf	6,5	;volatile
   378     017A                     l924:
   379                           
   380                           ;code.c: 94:     Speed_M1(10);
   381     017A  300A               	movlw	10
   382     017B  00C5               	movwf	Speed_M1@x
   383     017C  3000               	movlw	0
   384     017D  00C6               	movwf	Speed_M1@x+1
   385     017E  120A  118A  2102  120A  118A  	fcall	_Speed_M1
   386     0183                     l926:
   387                           
   388                           ;code.c: 97:     {;code.c: 98:         if(PORTBbits.RB0 == 0)
   389     0183  1283               	bcf	3,5	;RP0=0, select bank0
   390     0184  1303               	bcf	3,6	;RP1=0, select bank0
   391     0185  1806               	btfsc	6,0	;volatile
   392     0186  2988               	goto	u531
   393     0187  2989               	goto	u530
   394     0188                     u531:
   395     0188  2983               	goto	l926
   396     0189                     u530:
   397     0189                     l928:
   398                           
   399                           ;code.c: 99:         {;code.c: 100:             _delay((unsigned long)((20)*(16000000/40
      +                          00.0)));
   400     0189  3068               	movlw	104
   401     018A  1283               	bcf	3,5	;RP0=0, select bank0
   402     018B  1303               	bcf	3,6	;RP1=0, select bank0
   403     018C  00CA               	movwf	??_main+1
   404     018D  30E3               	movlw	227
   405     018E  00C9               	movwf	??_main
   406     018F                     u577:
   407     018F  0BC9               	decfsz	??_main,f
   408     0190  298F               	goto	u577
   409     0191  0BCA               	decfsz	??_main+1,f
   410     0192  298F               	goto	u577
   411     0193  2994               	nop2
   412     0194                     l930:
   413                           
   414                           ;code.c: 101:             PORTBbits.RB5 = !PORTBbits.RB5;
   415     0194  1003               	clrc
   416     0195  1283               	bcf	3,5	;RP0=0, select bank0
   417     0196  1303               	bcf	3,6	;RP1=0, select bank0
   418     0197  1E86               	btfss	6,5	;volatile
   419     0198  1403               	setc
   420     0199  1803               	btfsc	3,0
   421     019A  299C               	goto	u541
   422     019B  29A0               	goto	u540
   423     019C                     u541:
   424     019C  1283               	bcf	3,5	;RP0=0, select bank0
   425     019D  1303               	bcf	3,6	;RP1=0, select bank0
   426     019E  1686               	bsf	6,5	;volatile
   427     019F  29A3               	goto	u554
   428     01A0                     u540:
   429     01A0  1283               	bcf	3,5	;RP0=0, select bank0
   430     01A1  1303               	bcf	3,6	;RP1=0, select bank0
   431     01A2  1286               	bcf	6,5	;volatile
   432     01A3                     u554:
   433     01A3                     l50:	
   434                           ;code.c: 102:             while(PORTBbits.RB0 == 0);
   435                           
   436     01A3  1C06               	btfss	6,0	;volatile
   437     01A4  29A6               	goto	u561
   438     01A5  29A7               	goto	u560
   439     01A6                     u561:
   440     01A6  29A3               	goto	l50
   441     01A7                     u560:
   442     01A7  2983               	goto	l926
   443     01A8  120A  118A  280E   	ljmp	start
   444     01AB                     __end_of_main:
   445                           
   446                           	psect	text1
   447     01AB                     __ptext1:	
   448 ;; *************** function _timer0_init *****************
   449 ;; Defined at:
   450 ;;		line 53 in file "code.c"
   451 ;; Parameters:    Size  Location     Type
   452 ;;		None
   453 ;; Auto vars:     Size  Location     Type
   454 ;;		None
   455 ;; Return value:  Size  Location     Type
   456 ;;                  1    wreg      void 
   457 ;; Registers used:
   458 ;;		wreg
   459 ;; Tracked objects:
   460 ;;		On entry : 0/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   464 ;;      Params:         0       0       0       0       0
   465 ;;      Locals:         0       0       0       0       0
   466 ;;      Temps:          0       0       0       0       0
   467 ;;      Totals:         0       0       0       0       0
   468 ;;Total ram usage:        0 bytes
   469 ;; Hardware stack levels used: 1
   470 ;; Hardware stack levels required when called: 1
   471 ;; This function calls:
   472 ;;		Nothing
   473 ;; This function is called by:
   474 ;;		_main
   475 ;; This function uses a non-reentrant model
   476 ;;
   477                           
   478     01AB                     _timer0_init:	
   479                           ;psect for function _timer0_init
   480                           
   481     01AB                     l704:	
   482                           ;incstack = 0
   483                           ; Regs used in _timer0_init: [wreg]
   484                           
   485                           
   486                           ;code.c: 54:     OPTION_REGbits.T0CS = 0;
   487     01AB  1683               	bsf	3,5	;RP0=1, select bank1
   488     01AC  1303               	bcf	3,6	;RP1=0, select bank1
   489     01AD  1281               	bcf	1,5	;volatile
   490                           
   491                           ;code.c: 55:     OPTION_REGbits.PSA = 0;
   492     01AE  1181               	bcf	1,3	;volatile
   493                           
   494                           ;code.c: 56:     OPTION_REGbits.PS2 = 0;
   495     01AF  1101               	bcf	1,2	;volatile
   496                           
   497                           ;code.c: 57:     OPTION_REGbits.PS1 = 0;
   498     01B0  1081               	bcf	1,1	;volatile
   499                           
   500                           ;code.c: 58:     OPTION_REGbits.PS0 = 1;
   501     01B1  1401               	bsf	1,0	;volatile
   502     01B2                     l706:
   503                           
   504                           ;code.c: 59:     TMR0 = 235;
   505     01B2  30EB               	movlw	235
   506     01B3  1283               	bcf	3,5	;RP0=0, select bank0
   507     01B4  1303               	bcf	3,6	;RP1=0, select bank0
   508     01B5  0081               	movwf	1	;volatile
   509     01B6                     l708:
   510                           
   511                           ;code.c: 60:     INTCONbits.TMR0IF = 0;
   512     01B6  110B               	bcf	11,2	;volatile
   513     01B7                     l710:
   514                           
   515                           ;code.c: 61:     INTCONbits.TMR0IE = 1;
   516     01B7  168B               	bsf	11,5	;volatile
   517     01B8                     l712:
   518                           
   519                           ;code.c: 62:     INTCONbits.GIE = 1;
   520     01B8  178B               	bsf	11,7	;volatile
   521     01B9                     l36:
   522     01B9  0008               	return
   523     01BA                     __end_of_timer0_init:
   524                           
   525                           	psect	text2
   526     0102                     __ptext2:	
   527 ;; *************** function _Speed_M1 *****************
   528 ;; Defined at:
   529 ;;		line 65 in file "code.c"
   530 ;; Parameters:    Size  Location     Type
   531 ;;  x               2    5[BANK0 ] int 
   532 ;; Auto vars:     Size  Location     Type
   533 ;;  speed           1    0        unsigned char 
   534 ;; Return value:  Size  Location     Type
   535 ;;                  1    wreg      void 
   536 ;; Registers used:
   537 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   538 ;; Tracked objects:
   539 ;;		On entry : 0/0
   540 ;;		On exit  : 0/0
   541 ;;		Unchanged: 0/0
   542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   543 ;;      Params:         0       2       0       0       0
   544 ;;      Locals:         0       0       0       0       0
   545 ;;      Temps:          0       2       0       0       0
   546 ;;      Totals:         0       4       0       0       0
   547 ;;Total ram usage:        4 bytes
   548 ;; Hardware stack levels used: 1
   549 ;; Hardware stack levels required when called: 2
   550 ;; This function calls:
   551 ;;		___awdiv
   552 ;; This function is called by:
   553 ;;		_main
   554 ;; This function uses a non-reentrant model
   555 ;;
   556                           
   557     0102                     _Speed_M1:	
   558                           ;psect for function _Speed_M1
   559                           
   560     0102                     l902:	
   561                           ;incstack = 0
   562                           ; Regs used in _Speed_M1: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   563                           
   564                           
   565                           ;code.c: 65: void Speed_M1(int16_t x);code.c: 66: {;code.c: 67:     uint8_t speed;;code.
      +                          c: 68:     if (x < 0)
   566     0102  1283               	bcf	3,5	;RP0=0, select bank0
   567     0103  1303               	bcf	3,6	;RP1=0, select bank0
   568     0104  1FC6               	btfss	Speed_M1@x+1,7
   569     0105  2907               	goto	u511
   570     0106  2908               	goto	u510
   571     0107                     u511:
   572     0107  2931               	goto	l908
   573     0108                     u510:
   574     0108                     l904:
   575                           
   576                           ;code.c: 69:     {;code.c: 71:         Count_BOT1 = -x;
   577     0108  0945               	comf	Speed_M1@x,w
   578     0109  00C7               	movwf	??_Speed_M1
   579     010A  0946               	comf	Speed_M1@x+1,w
   580     010B  00C8               	movwf	??_Speed_M1+1
   581     010C  0AC7               	incf	??_Speed_M1,f
   582     010D  1903               	skipnz
   583     010E  0AC8               	incf	??_Speed_M1+1,f
   584     010F  0847               	movf	??_Speed_M1,w
   585     0110  00B8               	movwf	_Count_BOT1
   586     0111  0848               	movf	??_Speed_M1+1,w
   587     0112  00B9               	movwf	_Count_BOT1+1
   588     0113  3000               	movlw	0
   589     0114  1BB9               	btfsc	_Count_BOT1+1,7
   590     0115  30FF               	movlw	255
   591     0116  00BA               	movwf	_Count_BOT1+2
   592     0117  00BB               	movwf	_Count_BOT1+3
   593     0118                     l906:
   594                           
   595                           ;code.c: 72:         Count_TOP1 = -x/2;
   596     0118  30FE               	movlw	254
   597     0119  00F3               	movwf	___awdiv@divisor
   598     011A  30FF               	movlw	255
   599     011B  00F4               	movwf	___awdiv@divisor+1
   600     011C  0846               	movf	Speed_M1@x+1,w
   601     011D  00F6               	movwf	___awdiv@dividend+1
   602     011E  0845               	movf	Speed_M1@x,w
   603     011F  00F5               	movwf	___awdiv@dividend
   604     0120  120A  118A  2099  120A  118A  	fcall	___awdiv
   605     0125  0873               	movf	?___awdiv,w
   606     0126  1283               	bcf	3,5	;RP0=0, select bank0
   607     0127  1303               	bcf	3,6	;RP1=0, select bank0
   608     0128  00BC               	movwf	_Count_TOP1
   609     0129  0874               	movf	?___awdiv+1,w
   610     012A  00BD               	movwf	_Count_TOP1+1
   611     012B  3000               	movlw	0
   612     012C  1BBD               	btfsc	_Count_TOP1+1,7
   613     012D  30FF               	movlw	255
   614     012E  00BE               	movwf	_Count_TOP1+2
   615     012F  00BF               	movwf	_Count_TOP1+3
   616                           
   617                           ;code.c: 73:     }
   618     0130  2969               	goto	l43
   619     0131                     l908:
   620     0131  0846               	movf	Speed_M1@x+1,w
   621     0132  3A80               	xorlw	128
   622     0133  00FF               	movwf	btemp+1
   623     0134  3080               	movlw	128
   624     0135  027F               	subwf	btemp+1,w
   625     0136  1D03               	skipz
   626     0137  293A               	goto	u525
   627     0138  3001               	movlw	1
   628     0139  0245               	subwf	Speed_M1@x,w
   629     013A                     u525:
   630     013A  1C03               	skipc
   631     013B  293D               	goto	u521
   632     013C  293E               	goto	u520
   633     013D                     u521:
   634     013D  2957               	goto	l914
   635     013E                     u520:
   636     013E                     l910:
   637                           
   638                           ;code.c: 75:     {;code.c: 77:         Count_BOT1 = x;
   639     013E  1283               	bcf	3,5	;RP0=0, select bank0
   640     013F  1303               	bcf	3,6	;RP1=0, select bank0
   641     0140  0845               	movf	Speed_M1@x,w
   642     0141  00B8               	movwf	_Count_BOT1
   643     0142  0846               	movf	Speed_M1@x+1,w
   644     0143  00B9               	movwf	_Count_BOT1+1
   645     0144  3000               	movlw	0
   646     0145  1BB9               	btfsc	_Count_BOT1+1,7
   647     0146  30FF               	movlw	255
   648     0147  00BA               	movwf	_Count_BOT1+2
   649     0148  00BB               	movwf	_Count_BOT1+3
   650     0149                     l912:
   651                           
   652                           ;code.c: 78:         Count_TOP1 = (uint16_t)x/2;
   653     0149  0846               	movf	Speed_M1@x+1,w
   654     014A  00C8               	movwf	??_Speed_M1+1
   655     014B  0845               	movf	Speed_M1@x,w
   656     014C  00C7               	movwf	??_Speed_M1
   657     014D  1003               	clrc
   658     014E  0CC8               	rrf	??_Speed_M1+1,f
   659     014F  0CC7               	rrf	??_Speed_M1,f
   660     0150  0847               	movf	??_Speed_M1,w
   661     0151  00BC               	movwf	_Count_TOP1
   662     0152  0848               	movf	??_Speed_M1+1,w
   663     0153  00BD               	movwf	_Count_TOP1+1
   664     0154  01BE               	clrf	_Count_TOP1+2
   665     0155  01BF               	clrf	_Count_TOP1+3
   666                           
   667                           ;code.c: 79:     }
   668     0156  2969               	goto	l43
   669     0157                     l914:
   670                           
   671                           ;code.c: 81:     {;code.c: 82:       Count_BOT1 = 0;
   672     0157  3000               	movlw	0
   673     0158  1283               	bcf	3,5	;RP0=0, select bank0
   674     0159  1303               	bcf	3,6	;RP1=0, select bank0
   675     015A  00BB               	movwf	_Count_BOT1+3
   676     015B  3000               	movlw	0
   677     015C  00BA               	movwf	_Count_BOT1+2
   678     015D  3000               	movlw	0
   679     015E  00B9               	movwf	_Count_BOT1+1
   680     015F  3000               	movlw	0
   681     0160  00B8               	movwf	_Count_BOT1
   682                           
   683                           ;code.c: 83:       Count_TOP1 = 0;
   684     0161  3000               	movlw	0
   685     0162  00BF               	movwf	_Count_TOP1+3
   686     0163  3000               	movlw	0
   687     0164  00BE               	movwf	_Count_TOP1+2
   688     0165  3000               	movlw	0
   689     0166  00BD               	movwf	_Count_TOP1+1
   690     0167  3000               	movlw	0
   691     0168  00BC               	movwf	_Count_TOP1
   692     0169                     l43:
   693     0169  0008               	return
   694     016A                     __end_of_Speed_M1:
   695                           
   696                           	psect	text3
   697     0099                     __ptext3:	
   698 ;; *************** function ___awdiv *****************
   699 ;; Defined at:
   700 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;  divisor         2    3[COMMON] int 
   703 ;;  dividend        2    5[COMMON] int 
   704 ;; Auto vars:     Size  Location     Type
   705 ;;  quotient        2    3[BANK0 ] int 
   706 ;;  sign            1    2[BANK0 ] unsigned char 
   707 ;;  counter         1    1[BANK0 ] unsigned char 
   708 ;; Return value:  Size  Location     Type
   709 ;;                  2    3[COMMON] int 
   710 ;; Registers used:
   711 ;;		wreg, status,2, status,0
   712 ;; Tracked objects:
   713 ;;		On entry : 0/0
   714 ;;		On exit  : 0/0
   715 ;;		Unchanged: 0/0
   716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   717 ;;      Params:         4       0       0       0       0
   718 ;;      Locals:         0       4       0       0       0
   719 ;;      Temps:          0       1       0       0       0
   720 ;;      Totals:         4       5       0       0       0
   721 ;;Total ram usage:        9 bytes
   722 ;; Hardware stack levels used: 1
   723 ;; Hardware stack levels required when called: 1
   724 ;; This function calls:
   725 ;;		Nothing
   726 ;; This function is called by:
   727 ;;		_Speed_M1
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731     0099                     ___awdiv:	
   732                           ;psect for function ___awdiv
   733                           
   734     0099                     l858:	
   735                           ;incstack = 0
   736                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   737                           
   738     0099  1283               	bcf	3,5	;RP0=0, select bank0
   739     009A  1303               	bcf	3,6	;RP1=0, select bank0
   740     009B  01C2               	clrf	___awdiv@sign
   741     009C                     l860:
   742     009C  1FF4               	btfss	___awdiv@divisor+1,7
   743     009D  289F               	goto	u411
   744     009E  28A0               	goto	u410
   745     009F                     u411:
   746     009F  28A7               	goto	l866
   747     00A0                     u410:
   748     00A0                     l862:
   749     00A0  09F3               	comf	___awdiv@divisor,f
   750     00A1  09F4               	comf	___awdiv@divisor+1,f
   751     00A2  0AF3               	incf	___awdiv@divisor,f
   752     00A3  1903               	skipnz
   753     00A4  0AF4               	incf	___awdiv@divisor+1,f
   754     00A5                     l864:
   755     00A5  01C2               	clrf	___awdiv@sign
   756     00A6  0AC2               	incf	___awdiv@sign,f
   757     00A7                     l866:
   758     00A7  1FF6               	btfss	___awdiv@dividend+1,7
   759     00A8  28AA               	goto	u421
   760     00A9  28AB               	goto	u420
   761     00AA                     u421:
   762     00AA  28B4               	goto	l872
   763     00AB                     u420:
   764     00AB                     l868:
   765     00AB  09F5               	comf	___awdiv@dividend,f
   766     00AC  09F6               	comf	___awdiv@dividend+1,f
   767     00AD  0AF5               	incf	___awdiv@dividend,f
   768     00AE  1903               	skipnz
   769     00AF  0AF6               	incf	___awdiv@dividend+1,f
   770     00B0                     l870:
   771     00B0  3001               	movlw	1
   772     00B1  00C0               	movwf	??___awdiv
   773     00B2  0840               	movf	??___awdiv,w
   774     00B3  06C2               	xorwf	___awdiv@sign,f
   775     00B4                     l872:
   776     00B4  01C3               	clrf	___awdiv@quotient
   777     00B5  01C4               	clrf	___awdiv@quotient+1
   778     00B6                     l874:
   779     00B6  0873               	movf	___awdiv@divisor,w
   780     00B7  0474               	iorwf	___awdiv@divisor+1,w
   781     00B8  1903               	btfsc	3,2
   782     00B9  28BB               	goto	u431
   783     00BA  28BC               	goto	u430
   784     00BB                     u431:
   785     00BB  28F3               	goto	l894
   786     00BC                     u430:
   787     00BC                     l876:
   788     00BC  01C1               	clrf	___awdiv@counter
   789     00BD  0AC1               	incf	___awdiv@counter,f
   790     00BE  28CA               	goto	l882
   791     00BF                     l878:
   792     00BF  3001               	movlw	1
   793     00C0                     u445:
   794     00C0  1003               	clrc
   795     00C1  0DF3               	rlf	___awdiv@divisor,f
   796     00C2  0DF4               	rlf	___awdiv@divisor+1,f
   797     00C3  3EFF               	addlw	-1
   798     00C4  1D03               	skipz
   799     00C5  28C0               	goto	u445
   800     00C6                     l880:
   801     00C6  3001               	movlw	1
   802     00C7  00C0               	movwf	??___awdiv
   803     00C8  0840               	movf	??___awdiv,w
   804     00C9  07C1               	addwf	___awdiv@counter,f
   805     00CA                     l882:
   806     00CA  1FF4               	btfss	___awdiv@divisor+1,7
   807     00CB  28CD               	goto	u451
   808     00CC  28CE               	goto	u450
   809     00CD                     u451:
   810     00CD  28BF               	goto	l878
   811     00CE                     u450:
   812     00CE                     l884:
   813     00CE  3001               	movlw	1
   814     00CF                     u465:
   815     00CF  1003               	clrc
   816     00D0  0DC3               	rlf	___awdiv@quotient,f
   817     00D1  0DC4               	rlf	___awdiv@quotient+1,f
   818     00D2  3EFF               	addlw	-1
   819     00D3  1D03               	skipz
   820     00D4  28CF               	goto	u465
   821     00D5  0874               	movf	___awdiv@divisor+1,w
   822     00D6  0276               	subwf	___awdiv@dividend+1,w
   823     00D7  1D03               	skipz
   824     00D8  28DB               	goto	u475
   825     00D9  0873               	movf	___awdiv@divisor,w
   826     00DA  0275               	subwf	___awdiv@dividend,w
   827     00DB                     u475:
   828     00DB  1C03               	skipc
   829     00DC  28DE               	goto	u471
   830     00DD  28DF               	goto	u470
   831     00DE                     u471:
   832     00DE  28E6               	goto	l890
   833     00DF                     u470:
   834     00DF                     l886:
   835     00DF  0873               	movf	___awdiv@divisor,w
   836     00E0  02F5               	subwf	___awdiv@dividend,f
   837     00E1  0874               	movf	___awdiv@divisor+1,w
   838     00E2  1C03               	skipc
   839     00E3  03F6               	decf	___awdiv@dividend+1,f
   840     00E4  02F6               	subwf	___awdiv@dividend+1,f
   841     00E5                     l888:
   842     00E5  1443               	bsf	___awdiv@quotient,0
   843     00E6                     l890:
   844     00E6  3001               	movlw	1
   845     00E7                     u485:
   846     00E7  1003               	clrc
   847     00E8  0CF4               	rrf	___awdiv@divisor+1,f
   848     00E9  0CF3               	rrf	___awdiv@divisor,f
   849     00EA  3EFF               	addlw	-1
   850     00EB  1D03               	skipz
   851     00EC  28E7               	goto	u485
   852     00ED                     l892:
   853     00ED  3001               	movlw	1
   854     00EE  02C1               	subwf	___awdiv@counter,f
   855     00EF  1D03               	btfss	3,2
   856     00F0  28F2               	goto	u491
   857     00F1  28F3               	goto	u490
   858     00F2                     u491:
   859     00F2  28CE               	goto	l884
   860     00F3                     u490:
   861     00F3                     l894:
   862     00F3  0842               	movf	___awdiv@sign,w
   863     00F4  1903               	btfsc	3,2
   864     00F5  28F7               	goto	u501
   865     00F6  28F8               	goto	u500
   866     00F7                     u501:
   867     00F7  28FD               	goto	l898
   868     00F8                     u500:
   869     00F8                     l896:
   870     00F8  09C3               	comf	___awdiv@quotient,f
   871     00F9  09C4               	comf	___awdiv@quotient+1,f
   872     00FA  0AC3               	incf	___awdiv@quotient,f
   873     00FB  1903               	skipnz
   874     00FC  0AC4               	incf	___awdiv@quotient+1,f
   875     00FD                     l898:
   876     00FD  0844               	movf	___awdiv@quotient+1,w
   877     00FE  00F4               	movwf	?___awdiv+1
   878     00FF  0843               	movf	___awdiv@quotient,w
   879     0100  00F3               	movwf	?___awdiv
   880     0101                     l305:
   881     0101  0008               	return
   882     0102                     __end_of___awdiv:
   883                           
   884                           	psect	text4
   885     01BA                     __ptext4:	
   886 ;; *************** function _A4988_init *****************
   887 ;; Defined at:
   888 ;;		line 39 in file "code.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;		None
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		None
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   902 ;;      Params:         0       0       0       0       0
   903 ;;      Locals:         0       0       0       0       0
   904 ;;      Temps:          0       0       0       0       0
   905 ;;      Totals:         0       0       0       0       0
   906 ;;Total ram usage:        0 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; Hardware stack levels required when called: 1
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916     01BA                     _A4988_init:	
   917                           ;psect for function _A4988_init
   918                           
   919     01BA                     l702:	
   920                           ;incstack = 0
   921                           ; Regs used in _A4988_init: []
   922                           
   923                           
   924                           ;code.c: 40:     TRISBbits.TRISB6 = 0;
   925     01BA  1683               	bsf	3,5	;RP0=1, select bank1
   926     01BB  1303               	bcf	3,6	;RP1=0, select bank1
   927     01BC  1306               	bcf	6,6	;volatile
   928                           
   929                           ;code.c: 41:     TRISBbits.TRISB1 = 0;
   930     01BD  1086               	bcf	6,1	;volatile
   931                           
   932                           ;code.c: 42:     TRISBbits.TRISB2 = 0;
   933     01BE  1106               	bcf	6,2	;volatile
   934                           
   935                           ;code.c: 43:     TRISBbits.TRISB3 = 0;
   936     01BF  1186               	bcf	6,3	;volatile
   937                           
   938                           ;code.c: 44:     TRISBbits.TRISB5 = 0;
   939     01C0  1286               	bcf	6,5	;volatile
   940                           
   941                           ;code.c: 45:     TRISBbits.TRISB4 = 0;
   942     01C1  1206               	bcf	6,4	;volatile
   943                           
   944                           ;code.c: 47:     PORTBbits.RB6 = 1;
   945     01C2  1283               	bcf	3,5	;RP0=0, select bank0
   946     01C3  1303               	bcf	3,6	;RP1=0, select bank0
   947     01C4  1706               	bsf	6,6	;volatile
   948                           
   949                           ;code.c: 48:     PORTBbits.RB1 = 1;
   950     01C5  1486               	bsf	6,1	;volatile
   951                           
   952                           ;code.c: 49:     PORTBbits.RB2 = 1;
   953     01C6  1506               	bsf	6,2	;volatile
   954                           
   955                           ;code.c: 50:     PORTBbits.RB3 = 0;
   956     01C7  1186               	bcf	6,3	;volatile
   957     01C8                     l33:
   958     01C8  0008               	return
   959     01C9                     __end_of_A4988_init:
   960                           
   961                           	psect	text5
   962     0022                     __ptext5:	
   963 ;; *************** function _timer_isr *****************
   964 ;; Defined at:
   965 ;;		line 107 in file "code.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;		None
   968 ;; Auto vars:     Size  Location     Type
   969 ;;		None
   970 ;; Return value:  Size  Location     Type
   971 ;;                  1    wreg      void 
   972 ;; Registers used:
   973 ;;		wreg, btemp+1
   974 ;; Tracked objects:
   975 ;;		On entry : 0/0
   976 ;;		On exit  : 0/0
   977 ;;		Unchanged: 0/0
   978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   979 ;;      Params:         0       0       0       0       0
   980 ;;      Locals:         0       0       0       0       0
   981 ;;      Temps:          3       0       0       0       0
   982 ;;      Totals:         3       0       0       0       0
   983 ;;Total ram usage:        3 bytes
   984 ;; Hardware stack levels used: 1
   985 ;; This function calls:
   986 ;;		Nothing
   987 ;; This function is called by:
   988 ;;		Interrupt level 1
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992     0022                     _timer_isr:	
   993                           ;psect for function _timer_isr
   994                           
   995     0022                     i1l838:
   996                           
   997                           ;code.c: 109:     if(INTCONbits.TMR0IF)
   998     0022  1D0B               	btfss	11,2	;volatile
   999     0023  2825               	goto	u37_21
  1000     0024  2826               	goto	u37_20
  1001     0025                     u37_21:
  1002     0025  282B               	goto	i1l60
  1003     0026                     u37_20:
  1004     0026                     i1l840:
  1005                           
  1006                           ;code.c: 110:     {;code.c: 111:         TMR0 = 235;
  1007     0026  30EB               	movlw	235
  1008     0027  1283               	bcf	3,5	;RP0=0, select bank0
  1009     0028  1303               	bcf	3,6	;RP1=0, select bank0
  1010     0029  0081               	movwf	1	;volatile
  1011     002A                     i1l842:
  1012                           
  1013                           ;code.c: 112:         INTCONbits.TMR0IF = 0;
  1014     002A  110B               	bcf	11,2	;volatile
  1015     002B                     i1l60:	
  1016                           ;code.c: 113:     }
  1017                           
  1018                           
  1019                           ;code.c: 115:     Count_timer1++;
  1020     002B  3001               	movlw	1
  1021     002C  07F7               	addwf	_Count_timer1,f
  1022     002D  3000               	movlw	0
  1023     002E  1803               	skipnc
  1024     002F  3001               	movlw	1
  1025     0030  07F8               	addwf	_Count_timer1+1,f
  1026     0031  3000               	movlw	0
  1027     0032  1803               	skipnc
  1028     0033  3001               	movlw	1
  1029     0034  07F9               	addwf	_Count_timer1+2,f
  1030     0035  3000               	movlw	0
  1031     0036  1803               	skipnc
  1032     0037  3001               	movlw	1
  1033     0038  07FA               	addwf	_Count_timer1+3,f
  1034     0039                     i1l844:
  1035                           
  1036                           ;code.c: 117:     if (Count_timer1 <= Count_TOP1)
  1037     0039  1283               	bcf	3,5	;RP0=0, select bank0
  1038     003A  1303               	bcf	3,6	;RP1=0, select bank0
  1039     003B  083F               	movf	_Count_TOP1+3,w
  1040     003C  3A80               	xorlw	128
  1041     003D  00FF               	movwf	btemp+1
  1042     003E  087A               	movf	_Count_timer1+3,w
  1043     003F  3A80               	xorlw	128
  1044     0040  027F               	subwf	btemp+1,w
  1045     0041  1D03               	skipz
  1046     0042  284D               	goto	u38_23
  1047     0043  0879               	movf	_Count_timer1+2,w
  1048     0044  023E               	subwf	_Count_TOP1+2,w
  1049     0045  1D03               	skipz
  1050     0046  284D               	goto	u38_23
  1051     0047  0878               	movf	_Count_timer1+1,w
  1052     0048  023D               	subwf	_Count_TOP1+1,w
  1053     0049  1D03               	skipz
  1054     004A  284D               	goto	u38_23
  1055     004B  0877               	movf	_Count_timer1,w
  1056     004C  023C               	subwf	_Count_TOP1,w
  1057     004D                     u38_23:
  1058     004D  1C03               	skipc
  1059     004E  2850               	goto	u38_21
  1060     004F  2851               	goto	u38_20
  1061     0050                     u38_21:
  1062     0050  2853               	goto	i1l61
  1063     0051                     u38_20:
  1064     0051                     i1l846:
  1065                           
  1066                           ;code.c: 118:     {;code.c: 119:        PORTBbits.RB4 = 1;
  1067     0051  1606               	bsf	6,4	;volatile
  1068                           
  1069                           ;code.c: 120:     }
  1070     0052  2854               	goto	i1l848
  1071     0053                     i1l61:	
  1072                           ;code.c: 122:     else
  1073                           
  1074                           
  1075                           ;code.c: 123:     {;code.c: 124:        PORTBbits.RB4 = 0;
  1076     0053  1206               	bcf	6,4	;volatile
  1077     0054                     i1l848:
  1078                           
  1079                           ;code.c: 126:     if (Count_timer1 > Count_BOT1)
  1080     0054  083B               	movf	_Count_BOT1+3,w
  1081     0055  3A80               	xorlw	128
  1082     0056  00FF               	movwf	btemp+1
  1083     0057  087A               	movf	_Count_timer1+3,w
  1084     0058  3A80               	xorlw	128
  1085     0059  027F               	subwf	btemp+1,w
  1086     005A  1D03               	skipz
  1087     005B  2866               	goto	u39_23
  1088     005C  0879               	movf	_Count_timer1+2,w
  1089     005D  023A               	subwf	_Count_BOT1+2,w
  1090     005E  1D03               	skipz
  1091     005F  2866               	goto	u39_23
  1092     0060  0878               	movf	_Count_timer1+1,w
  1093     0061  0239               	subwf	_Count_BOT1+1,w
  1094     0062  1D03               	skipz
  1095     0063  2866               	goto	u39_23
  1096     0064  0877               	movf	_Count_timer1,w
  1097     0065  0238               	subwf	_Count_BOT1,w
  1098     0066                     u39_23:
  1099     0066  1803               	skipnc
  1100     0067  2869               	goto	u39_21
  1101     0068  286A               	goto	u39_20
  1102     0069                     u39_21:
  1103     0069  2890               	goto	i1l66
  1104     006A                     u39_20:
  1105     006A                     i1l850:
  1106                           
  1107                           ;code.c: 127:     {;code.c: 128:         Count_timer1 = 0;
  1108     006A  3000               	movlw	0
  1109     006B  00FA               	movwf	_Count_timer1+3
  1110     006C  3000               	movlw	0
  1111     006D  00F9               	movwf	_Count_timer1+2
  1112     006E  3000               	movlw	0
  1113     006F  00F8               	movwf	_Count_timer1+1
  1114     0070  3000               	movlw	0
  1115     0071  00F7               	movwf	_Count_timer1
  1116     0072                     i1l852:
  1117                           
  1118                           ;code.c: 129:         if (PORTBbits.RB5 == 1)
  1119     0072  1E86               	btfss	6,5	;volatile
  1120     0073  2875               	goto	u40_21
  1121     0074  2876               	goto	u40_20
  1122     0075                     u40_21:
  1123     0075  2885               	goto	i1l856
  1124     0076                     u40_20:
  1125     0076                     i1l854:
  1126                           
  1127                           ;code.c: 130:         {;code.c: 131:             step1++;
  1128     0076  3001               	movlw	1
  1129     0077  07A8               	addwf	_step1,f
  1130     0078  3000               	movlw	0
  1131     0079  1803               	skipnc
  1132     007A  3001               	movlw	1
  1133     007B  07A9               	addwf	_step1+1,f
  1134     007C  3000               	movlw	0
  1135     007D  1803               	skipnc
  1136     007E  3001               	movlw	1
  1137     007F  07AA               	addwf	_step1+2,f
  1138     0080  3000               	movlw	0
  1139     0081  1803               	skipnc
  1140     0082  3001               	movlw	1
  1141     0083  07AB               	addwf	_step1+3,f
  1142                           
  1143                           ;code.c: 132:         }
  1144     0084  2890               	goto	i1l66
  1145     0085                     i1l856:
  1146                           
  1147                           ;code.c: 134:         {;code.c: 135:             step1--;
  1148     0085  30FF               	movlw	255
  1149     0086  07A8               	addwf	_step1,f
  1150     0087  30FF               	movlw	255
  1151     0088  1C03               	skipc
  1152     0089  07A9               	addwf	_step1+1,f
  1153     008A  30FF               	movlw	255
  1154     008B  1C03               	skipc
  1155     008C  07AA               	addwf	_step1+2,f
  1156     008D  30FF               	movlw	255
  1157     008E  1C03               	skipc
  1158     008F  07AB               	addwf	_step1+3,f
  1159     0090                     i1l66:
  1160     0090  0872               	movf	??_timer_isr+2,w
  1161     0091  00FF               	movwf	btemp+1
  1162     0092  0871               	movf	??_timer_isr+1,w
  1163     0093  008A               	movwf	10
  1164     0094  0E70               	swapf	??_timer_isr,w
  1165     0095  0083               	movwf	3
  1166     0096  0EFE               	swapf	btemp,f
  1167     0097  0E7E               	swapf	btemp,w
  1168     0098  0009               	retfie
  1169     0099                     __end_of_timer_isr:
  1170     007E                     btemp	set	126	;btemp
  1171     007E                     wtemp0	set	126
  1172                           
  1173                           	psect	intentry
  1174     0004                     __pintentry:	
  1175                           ;incstack = 0
  1176                           ; Regs used in _timer_isr: [wreg+btemp+1]
  1177                           
  1178     0004                     interrupt_function:
  1179     007E                     saved_w	set	btemp
  1180     0004  00FE               	movwf	btemp
  1181     0005  0E03               	swapf	3,w
  1182     0006  00F0               	movwf	??_timer_isr
  1183     0007  080A               	movf	10,w
  1184     0008  00F1               	movwf	??_timer_isr+1
  1185     0009  087F               	movf	btemp+1,w
  1186     000A  00F2               	movwf	??_timer_isr+2
  1187     000B  120A  118A  2822   	ljmp	_timer_isr
  1188                           
  1189                           	psect	idloc
  1190                           
  1191                           ;Config register IDLOC0 @ 0x2000
  1192                           ;	unspecified, using default values
  1193     2000                     	org	8192
  1194     2000  3FFF               	dw	16383
  1195                           
  1196                           ;Config register IDLOC1 @ 0x2001
  1197                           ;	unspecified, using default values
  1198     2001                     	org	8193
  1199     2001  3FFF               	dw	16383
  1200                           
  1201                           ;Config register IDLOC2 @ 0x2002
  1202                           ;	unspecified, using default values
  1203     2002                     	org	8194
  1204     2002  3FFF               	dw	16383
  1205                           
  1206                           ;Config register IDLOC3 @ 0x2003
  1207                           ;	unspecified, using default values
  1208     2003                     	org	8195
  1209     2003  3FFF               	dw	16383
  1210                           
  1211                           	psect	config
  1212                           
  1213                           ;Config register CONFIG @ 0x2007
  1214                           ;	Oscillator Selection bits
  1215                           ;	FOSC = HS, HS oscillator
  1216                           ;	Watchdog Timer Enable bit
  1217                           ;	WDTE = OFF, WDT disabled
  1218                           ;	Power-up Timer Enable bit
  1219                           ;	PWRTE = OFF, PWRT disabled
  1220                           ;	Brown-out Reset Enable bit
  1221                           ;	BOREN = OFF, BOR disabled
  1222                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1223                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1224                           ;	Data EEPROM Memory Code Protection bit
  1225                           ;	CPD = OFF, Data EEPROM code protection off
  1226                           ;	Flash Program Memory Write Enable bits
  1227                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1228                           ;	In-Circuit Debugger Mode bit
  1229                           ;	DEBUG = 0x1, unprogrammed default
  1230                           ;	Flash Program Memory Code Protection bit
  1231                           ;	CP = OFF, Code protection off
  1232     2007                     	org	8199
  1233     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      11
    BANK0            80     11      43
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _Speed_M1->___awdiv

Critical Paths under _timer_isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Speed_M1
    _Speed_M1->___awdiv

Critical Paths under _timer_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _timer_isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _timer_isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _timer_isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     901
                                              9 BANK0      2     2      0
                         _A4988_init
                           _Speed_M1
                        _timer0_init
 ---------------------------------------------------------------------------------
 (1) _timer0_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Speed_M1                                             5     3      2     901
                                              5 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     625
                                              3 COMMON     4     0      4
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (1) _A4988_init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _timer_isr                                            3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _A4988_init
   _Speed_M1
     ___awdiv
   _timer0_init

 _timer_isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      36       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      B      2B       5       53.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      36      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat Apr 29 09:00:13 2023

                     l33 01C8                       l50 01A3                       l43 0169  
                     l36 01B9             ___awdiv@sign 0042                       fsr 0004  
                    l305 0101                      l702 01BA                      l710 01B7  
                    l712 01B8                      l704 01AB                      l706 01B2  
                    l708 01B6                      l910 013E                      l902 0102  
                    l912 0149                      l904 0108                      l920 0174  
                    l914 0157                      l906 0118                      l930 0194  
                    l922 0177                      l860 009C                      l908 0131  
                    l924 017A                      l916 016A                      l870 00B0  
                    l862 00A0                      l926 0183                      l918 016F  
                    l880 00C6                      l872 00B4                      l864 00A5  
                    l928 0189                      l890 00E6                      l882 00CA  
                    l874 00B6                      l866 00A7                      l858 0099  
                    l892 00ED                      l884 00CE                      l876 00BC  
                    l868 00AB                      l886 00DF                      l878 00BF  
                    l894 00F3                      l896 00F8                      l888 00E5  
                    l898 00FD                      u410 00A0                      u411 009F  
                    u500 00F8                      u420 00AB                      u501 00F7  
                    u421 00AA                      u430 00BC                      u510 0108  
                    u431 00BB                      u511 0107                      u520 013E  
                    u521 013D                      u450 00CE                      u530 0189  
                    u451 00CD                      u531 0188                      u540 01A0  
                    u445 00C0                      u525 013A                      u541 019C  
                    u470 00DF                      u471 00DE                      u560 01A7  
                    u465 00CF                      u561 01A6                      u490 00F3  
                    u554 01A3                      u491 00F2                      u475 00DB  
                    u485 00E7                      u577 018F                      indf 0000  
           ??_A4988_init 0073                     i1l60 002B                     i1l61 0053  
                   i1l66 0090                     _TMR0 0001                     _main 016A  
                   btemp 007E                     start 000E       __end_of_A4988_init 01C9  
                  ?_main 0070          __end_of___awdiv 0102          ___awdiv@divisor 0073  
                  i1l840 0026                    i1l850 006A                    i1l842 002A  
                  i1l852 0072                    i1l844 0039                    i1l854 0076  
                  i1l846 0051                    i1l838 0022                    i1l856 0085  
                  i1l848 0054          ___awdiv@counter 0041                    u40_20 0076  
                  u40_21 0075                    u37_20 0026                    u37_21 0025  
                  u38_20 0051                    u38_21 0050                    u38_23 004D  
                  u39_20 006A                    u39_21 0069                    u39_23 0066  
                  _step1 0028                    _step2 0024                    pclath 000A  
             _Count_BOT1 0038               _Count_BOT2 0030               _Count_TOP1 003C  
             _Count_TOP2 0034                    status 0003                    wtemp0 007E  
        __initialization 0011             __end_of_main 01AB                   ??_main 0049  
       __end_of_Speed_M1 016A         ___awdiv@dividend 0075                ??___awdiv 0040  
           ?_timer0_init 0070         ___awdiv@quotient 0043                   saved_w 007E  
__end_of__initialization 001E           __pcstackCOMMON 0070           _OPTION_REGbits 0081  
           _analog_value 0020               __pbssBANK0 0020               __pmaintext 016A  
              ?_Speed_M1 0045               __pintentry 0004               ??_Speed_M1 0047  
                ___awdiv 0099                  __ptext1 01AB                  __ptext2 0102  
                __ptext3 0099                  __ptext4 01BA                  __ptext5 0022  
                clrloop0 01CA     end_of_initialization 001E        __end_of_timer_isr 0099  
              _PORTBbits 0006             _Count_timer1 0077             _Count_timer2 002C  
              _TRISBbits 0086      start_initialization 0011                Speed_M1@x 0045  
            __pbssCOMMON 0077                ___latbits 0002            __pcstackBANK0 0040  
             _A4988_init 01BA                 ?___awdiv 0073        interrupt_function 0004  
              clear_ram0 01C9            ??_timer0_init 0073                _timer_isr 0022  
            ?_A4988_init 0070                 _Speed_M1 0102               ?_timer_isr 0070  
    __end_of_timer0_init 01BA               _INTCONbits 000B                 intlevel1 0000  
            ??_timer_isr 0070              _timer0_init 01AB  
